package models.mercadoria;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IMercadoria {











  /** Generated by JML to implement the instance model field itamanho. */
  private java.lang.String models.mercadoria.IMercadoria.itamanho;

  /** Generated by JML to implement the instance model field iproduto. */
  private java.lang.String models.mercadoria.IMercadoria.iproduto;

  /** Generated by JML to implement the instance model field ipreco. */
  private double models.mercadoria.IMercadoria.ipreco;

  /** Generated by JML to implement the instance model field icor. */
  private java.lang.String models.mercadoria.IMercadoria.icor;

  /** Generated by JML to implement the instance model field inome. */
  private java.lang.String models.mercadoria.IMercadoria.inome;

  /** Generated by JML to implement the instance model field iID. */
  private int models.mercadoria.IMercadoria.iID;

  /** Generated by JML to check the normal postcondition of
   * method getPreco. */
  after (final models.mercadoria.IMercadoria object$rac) returning (double rac$result) :
     execution(double models.mercadoria.IMercadoria.getPreco()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.ipreco));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 12, character 31 (models.mercadoria.IMercadoria.java:12), when \n\t\'this.ipreco\' is "+object$rac.ipreco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getPreco regarding specifications at \n[spec-case]: line 12, character 31 (models.mercadoria.IMercadoria.java:12)"+", when \n\t\'this.ipreco\' is "+object$rac.ipreco+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getPreco()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getPreco. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(double models.mercadoria.IMercadoria.getPreco()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getPreco()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getPreco\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getPreco()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getID. */
  after (final models.mercadoria.IMercadoria object$rac) returning (int rac$result) :
     execution(int models.mercadoria.IMercadoria.getID()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.iID));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getID regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 16, character 31 (models.mercadoria.IMercadoria.java:16), when \n\t\'this.iID\' is "+object$rac.iID;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getID regarding specifications at \n[spec-case]: line 16, character 31 (models.mercadoria.IMercadoria.java:16)"+", when \n\t\'this.iID\' is "+object$rac.iID+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getID()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getID. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(int models.mercadoria.IMercadoria.getID()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getID()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getID\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getID regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getID()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getNome. */
  after (final models.mercadoria.IMercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.IMercadoria.getNome()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.inome)));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 20, character 31 (models.mercadoria.IMercadoria.java:20), when \n\t\'this.inome\' is "+object$rac.inome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getNome regarding specifications at \n[spec-case]: line 20, character 31 (models.mercadoria.IMercadoria.java:20)"+", when \n\t\'this.inome\' is "+object$rac.inome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getNome()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getNome. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.IMercadoria.getNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getNome()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getCor. */
  after (final models.mercadoria.IMercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.IMercadoria.getCor()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.icor)));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 24, character 31 (models.mercadoria.IMercadoria.java:24), when \n\t\'this.icor\' is "+object$rac.icor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getCor regarding specifications at \n[spec-case]: line 24, character 31 (models.mercadoria.IMercadoria.java:24)"+", when \n\t\'this.icor\' is "+object$rac.icor+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getCor()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getCor. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.IMercadoria.getCor()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getCor()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getCor\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getCor()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getTamanho. */
  after (final models.mercadoria.IMercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.IMercadoria.getTamanho()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.itamanho)));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 28, character 31 (models.mercadoria.IMercadoria.java:28), when \n\t\'this.itamanho\' is "+object$rac.itamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getTamanho regarding specifications at \n[spec-case]: line 28, character 31 (models.mercadoria.IMercadoria.java:28)"+", when \n\t\'this.itamanho\' is "+object$rac.itamanho+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getTamanho()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getTamanho. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.IMercadoria.getTamanho()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getTamanho()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getTamanho\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getTamanho()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getProduto. */
  after (final models.mercadoria.IMercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.IMercadoria.getProduto()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.iproduto)));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.getProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 32, character 31 (models.mercadoria.IMercadoria.java:32), when \n\t\'this.iproduto\' is "+object$rac.iproduto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getProduto regarding specifications at \n[spec-case]: line 32, character 31 (models.mercadoria.IMercadoria.java:32)"+", when \n\t\'this.iproduto\' is "+object$rac.iproduto+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getProduto()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getProduto. */
  after (final models.mercadoria.IMercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.IMercadoria.getProduto()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.getProduto()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getProduto\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.getProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.getProduto()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setPreco. */
  after (final models.mercadoria.IMercadoria object$rac, final double novoPreco) returning () :
     execution(void models.mercadoria.IMercadoria.setPreco(double)) && this(object$rac) && args(novoPreco) {
       boolean rac$b = (!(novoPreco >= +0.0D) || (object$rac.ipreco == novoPreco));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.setPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 38, character 30 (models.mercadoria.IMercadoria.java:38), when \n\t\'this.ipreco\' is "+object$rac.ipreco+"\n\t\'novoPreco\' is "+novoPreco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setPreco regarding specifications at \n[spec-case]: line 38, character 30 (models.mercadoria.IMercadoria.java:38)"+", when \n\t\'this.ipreco\' is "+object$rac.ipreco+"\n\t\'novoPreco\' is "+novoPreco+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setPreco(double novoPreco)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setPreco. */
  after (final models.mercadoria.IMercadoria object$rac, final double novoPreco) throwing (Throwable rac$e) :
     execution(void models.mercadoria.IMercadoria.setPreco(double)) && this(object$rac) && args(novoPreco) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.setPreco(double novoPreco)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (novoPreco >= +0.0D)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setPreco\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.setPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.setPreco(double novoPreco)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setNome. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoNome) returning () :
     execution(void models.mercadoria.IMercadoria.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
       boolean rac$b = (!((novoNome != null) && (novoNome != null)) || (object$rac.inome == novoNome));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.setNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 44, character 29 (models.mercadoria.IMercadoria.java:44), when \n\t\'this.inome\' is "+object$rac.inome+"\n\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setNome regarding specifications at \n[spec-case]: line 44, character 29 (models.mercadoria.IMercadoria.java:44)"+", when \n\t\'this.inome\' is "+object$rac.inome+"\n\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setNome. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoNome) throwing (Throwable rac$e) :
     execution(void models.mercadoria.IMercadoria.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.setNome(java.lang.String novoNome)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoNome != null) && (novoNome != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.setNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.setNome(java.lang.String novoNome)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setCor. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novaCor) returning () :
     execution(void models.mercadoria.IMercadoria.setCor(java.lang.String)) && this(object$rac) && args(novaCor) {
       boolean rac$b = (!((novaCor != null) && (novaCor != null)) || (object$rac.icor == novaCor));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.setCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 50, character 28 (models.mercadoria.IMercadoria.java:50), when \n\t\'this.icor\' is "+object$rac.icor+"\n\t\'novaCor\' is "+novaCor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setCor regarding specifications at \n[spec-case]: line 50, character 28 (models.mercadoria.IMercadoria.java:50)"+", when \n\t\'this.icor\' is "+object$rac.icor+"\n\t\'novaCor\' is "+novaCor+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setCor(java.lang.String novaCor)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setCor. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novaCor) throwing (Throwable rac$e) :
     execution(void models.mercadoria.IMercadoria.setCor(java.lang.String)) && this(object$rac) && args(novaCor) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.setCor(java.lang.String novaCor)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novaCor != null) && (novaCor != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setCor\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.setCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.setCor(java.lang.String novaCor)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setTamanho. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoTamanho) returning () :
     execution(void models.mercadoria.IMercadoria.setTamanho(java.lang.String)) && this(object$rac) && args(novoTamanho) {
       boolean rac$b = (!((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG"))) || (object$rac.itamanho == novoTamanho));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.setTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 59, character 32 (models.mercadoria.IMercadoria.java:59), when \n\t\'this.itamanho\' is "+object$rac.itamanho+"\n\t\'novoTamanho\' is "+novoTamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setTamanho regarding specifications at \n[spec-case]: line 59, character 32 (models.mercadoria.IMercadoria.java:59)"+", when \n\t\'this.itamanho\' is "+object$rac.itamanho+"\n\t\'novoTamanho\' is "+novoTamanho+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setTamanho(java.lang.String novoTamanho)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setTamanho. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoTamanho) throwing (Throwable rac$e) :
     execution(void models.mercadoria.IMercadoria.setTamanho(java.lang.String)) && this(object$rac) && args(novoTamanho) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.setTamanho(java.lang.String novoTamanho)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG")))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setTamanho\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.setTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.setTamanho(java.lang.String novoTamanho)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setProduto. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoProduto) returning () :
     execution(void models.mercadoria.IMercadoria.setProduto(java.lang.String)) && this(object$rac) && args(novoProduto) {
       boolean rac$b = (!((novoProduto != null) && (novoProduto != null)) || (object$rac.iproduto == novoProduto));
       String nPostErrorMsg =  "by method models.mercadoria.IMercadoria.setProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", [spec-case]: line 65, character 32 (models.mercadoria.IMercadoria.java:65), when \n\t\'this.iproduto\' is "+object$rac.iproduto+"\n\t\'novoProduto\' is "+novoProduto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setProduto regarding specifications at \n[spec-case]: line 65, character 32 (models.mercadoria.IMercadoria.java:65)"+", when \n\t\'this.iproduto\' is "+object$rac.iproduto+"\n\t\'novoProduto\' is "+novoProduto+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setProduto(java.lang.String novoProduto)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setProduto. */
  after (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoProduto) throwing (Throwable rac$e) :
     execution(void models.mercadoria.IMercadoria.setProduto(java.lang.String)) && this(object$rac) && args(novoProduto) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.IMercadoria.setProduto(java.lang.String novoProduto)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoProduto != null) && (novoProduto != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setProduto\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.IMercadoria.setProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.IMercadoria.setProduto(java.lang.String novoProduto)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * interface IMercadoria. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(!static * models.mercadoria.IMercadoria+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = ((((object$rac.inome != null) && (object$rac.icor != null)) && (object$rac.itamanho != null)) && (object$rac.iproduto != null));
       String invErrorMsg = "@pre <File \"IMercadoria.java\"> regarding code at \nFile \"IMercadoria.java\"\nnon_null for field 'inome' <File \"models.mercadoria.IMercadoria.java\", line 6, character 48 (models.mercadoria.IMercadoria.java:6)>\nnon_null for field 'icor' <File \"models.mercadoria.IMercadoria.java\", line 7, character 47 (models.mercadoria.IMercadoria.java:7)>\nnon_null for field 'itamanho' <File \"models.mercadoria.IMercadoria.java\", line 8, character 51 (models.mercadoria.IMercadoria.java:8)>\nnon_null for field 'iproduto' <File \"models.mercadoria.IMercadoria.java\", line 9, character 51 (models.mercadoria.IMercadoria.java:9)>";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"IMercadoria.java\"> regarding code at \nFile \"IMercadoria.java\"\nnon_null for field 'inome' <File \"models.mercadoria.IMercadoria.java\", line 6, character 48 (models.mercadoria.IMercadoria.java:6)>\nnon_null for field 'icor' <File \"models.mercadoria.IMercadoria.java\", line 7, character 47 (models.mercadoria.IMercadoria.java:7)>\nnon_null for field 'itamanho' <File \"models.mercadoria.IMercadoria.java\", line 8, character 51 (models.mercadoria.IMercadoria.java:8)>\nnon_null for field 'iproduto' <File \"models.mercadoria.IMercadoria.java\", line 9, character 51 (models.mercadoria.IMercadoria.java:9)>\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method getPreco. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(double models.mercadoria.IMercadoria.getPreco()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 12, character 20 (models.mercadoria.IMercadoria.java:12), and \nby method models.mercadoria.IMercadoria.getPreco regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getPreco regarding specifications at \n[spec-case]: line 12, character 20 (models.mercadoria.IMercadoria.java:12)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getPreco()");

     }

  /** Generated by JML to check the precondition of
   * method getID. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(int models.mercadoria.IMercadoria.getID()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 16, character 20 (models.mercadoria.IMercadoria.java:16), and \nby method models.mercadoria.IMercadoria.getID regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getID regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getID regarding specifications at \n[spec-case]: line 16, character 20 (models.mercadoria.IMercadoria.java:16)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getID()");

     }

  /** Generated by JML to check the precondition of
   * method getNome. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(java.lang.String models.mercadoria.IMercadoria.getNome()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 20, character 20 (models.mercadoria.IMercadoria.java:20), and \nby method models.mercadoria.IMercadoria.getNome regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getNome regarding specifications at \n[spec-case]: line 20, character 20 (models.mercadoria.IMercadoria.java:20)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getNome()");

     }

  /** Generated by JML to check the precondition of
   * method getCor. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(java.lang.String models.mercadoria.IMercadoria.getCor()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 24, character 20 (models.mercadoria.IMercadoria.java:24), and \nby method models.mercadoria.IMercadoria.getCor regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getCor regarding specifications at \n[spec-case]: line 24, character 20 (models.mercadoria.IMercadoria.java:24)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getCor()");

     }

  /** Generated by JML to check the precondition of
   * method getTamanho. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(java.lang.String models.mercadoria.IMercadoria.getTamanho()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 28, character 20 (models.mercadoria.IMercadoria.java:28), and \nby method models.mercadoria.IMercadoria.getTamanho regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getTamanho regarding specifications at \n[spec-case]: line 28, character 20 (models.mercadoria.IMercadoria.java:28)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getTamanho()");

     }

  /** Generated by JML to check the precondition of
   * method getProduto. */
  before (final models.mercadoria.IMercadoria object$rac) :
     execution(java.lang.String models.mercadoria.IMercadoria.getProduto()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 32, character 20 (models.mercadoria.IMercadoria.java:32), and \nby method models.mercadoria.IMercadoria.getProduto regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.getProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\"";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.getProduto regarding specifications at \n[spec-case]: line 32, character 20 (models.mercadoria.IMercadoria.java:32)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.getProduto()");

     }

  /** Generated by JML to check the precondition of
   * method setPreco. */
  before (final models.mercadoria.IMercadoria object$rac, final double novoPreco) :
     execution(void models.mercadoria.IMercadoria.setPreco(double)) && 
     this(object$rac) && args(novoPreco) {
       boolean rac$b = (novoPreco >= +0.0D);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 36, character 34 (models.mercadoria.IMercadoria.java:36), and \nby method models.mercadoria.IMercadoria.setPreco regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.setPreco regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", when \n\t\'novoPreco\' is "+novoPreco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setPreco regarding specifications at \n[spec-case]: line 36, character 34 (models.mercadoria.IMercadoria.java:36)"+", when \n"+"\t\'novoPreco\' is "+novoPreco+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setPreco(double novoPreco)");

     }

  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoNome) :
     execution(void models.mercadoria.IMercadoria.setNome(java.lang.String)) && 
     this(object$rac) && args(novoNome) {
       boolean rac$b = ((novoNome != null) && (novoNome != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 42, character 33 (models.mercadoria.IMercadoria.java:42), and \nby method models.mercadoria.IMercadoria.setNome regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.setNome regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", when \n\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setNome regarding specifications at \n[spec-case]: line 42, character 33 (models.mercadoria.IMercadoria.java:42)"+", when \n"+"\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the precondition of
   * method setCor. */
  before (final models.mercadoria.IMercadoria object$rac, final java.lang.String novaCor) :
     execution(void models.mercadoria.IMercadoria.setCor(java.lang.String)) && 
     this(object$rac) && args(novaCor) {
       boolean rac$b = ((novaCor != null) && (novaCor != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 48, character 32 (models.mercadoria.IMercadoria.java:48), and \nby method models.mercadoria.IMercadoria.setCor regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.setCor regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", when \n\t\'novaCor\' is "+novaCor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setCor regarding specifications at \n[spec-case]: line 48, character 32 (models.mercadoria.IMercadoria.java:48)"+", when \n"+"\t\'novaCor\' is "+novaCor+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setCor(java.lang.String novaCor)");

     }

  /** Generated by JML to check the precondition of
   * method setTamanho. */
  before (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoTamanho) :
     execution(void models.mercadoria.IMercadoria.setTamanho(java.lang.String)) && 
     this(object$rac) && args(novoTamanho) {
       boolean rac$b = ((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG")));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 54, character 55 (models.mercadoria.IMercadoria.java:54), and \nby method models.mercadoria.IMercadoria.setTamanho regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.setTamanho regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", when \n\t\'novoTamanho\' is "+novoTamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setTamanho regarding specifications at \n[spec-case]: line 54, character 55 (models.mercadoria.IMercadoria.java:54)"+", when \n"+"\t\'novoTamanho\' is "+novoTamanho+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setTamanho(java.lang.String novoTamanho)");

     }

  /** Generated by JML to check the precondition of
   * method setProduto. */
  before (final models.mercadoria.IMercadoria object$rac, final java.lang.String novoProduto) :
     execution(void models.mercadoria.IMercadoria.setProduto(java.lang.String)) && 
     this(object$rac) && args(novoProduto) {
       boolean rac$b = ((novoProduto != null) && (novoProduto != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 63, character 36 (models.mercadoria.IMercadoria.java:63), and \nby method models.mercadoria.IMercadoria.setProduto regarding code at \nFile \"models.mercadoria.IMercadoria.java\"by method models.mercadoria.IMercadoria.setProduto regarding specifications at \nFile \"models.mercadoria.IMercadoria.java\", when \n\t\'novoProduto\' is "+novoProduto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.IMercadoria.java\" by method models.mercadoria.IMercadoria.setProduto regarding specifications at \n[spec-case]: line 63, character 36 (models.mercadoria.IMercadoria.java:63)"+", when \n"+"\t\'novoProduto\' is "+novoProduto+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.IMercadoria.setProduto(java.lang.String novoProduto)");

     }


  /** Generated by JML to check non-static invariants of 
   * interface IMercadoria. */
  after (final models.mercadoria.IMercadoria object$rac) :
     (execution(!static * models.mercadoria.IMercadoria+.*(..)) || 
       execution(models.mercadoria.IMercadoria+.new(..))) && 
     !execution(void models.mercadoria.IMercadoria.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = ((((object$rac.inome != null) && (object$rac.icor != null)) && (object$rac.itamanho != null)) && (object$rac.iproduto != null));
         String invErrorMsg = "@post <File \"IMercadoria.java\"> regarding code at \nFile \"IMercadoria.java\"\nnon_null for field 'inome' <File \"models.mercadoria.IMercadoria.java\", line 6, character 48 (models.mercadoria.IMercadoria.java:6)>\nnon_null for field 'icor' <File \"models.mercadoria.IMercadoria.java\", line 7, character 47 (models.mercadoria.IMercadoria.java:7)>\nnon_null for field 'itamanho' <File \"models.mercadoria.IMercadoria.java\", line 8, character 51 (models.mercadoria.IMercadoria.java:8)>\nnon_null for field 'iproduto' <File \"models.mercadoria.IMercadoria.java\", line 9, character 51 (models.mercadoria.IMercadoria.java:9)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"IMercadoria.java\"> regarding code at \nFile \"IMercadoria.java\"\nnon_null for field 'inome' <File \"models.mercadoria.IMercadoria.java\", line 6, character 48 (models.mercadoria.IMercadoria.java:6)>\nnon_null for field 'icor' <File \"models.mercadoria.IMercadoria.java\", line 7, character 47 (models.mercadoria.IMercadoria.java:7)>\nnon_null for field 'itamanho' <File \"models.mercadoria.IMercadoria.java\", line 8, character 51 (models.mercadoria.IMercadoria.java:8)>\nnon_null for field 'iproduto' <File \"models.mercadoria.IMercadoria.java\", line 9, character 51 (models.mercadoria.IMercadoria.java:9)>\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IMercadoria{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IMercadoria;
    before(): (execution(double models.mercadoria.IMercadoria.getPreco())
            || execution(int models.mercadoria.IMercadoria.getID())
            || execution(java.lang.String models.mercadoria.IMercadoria.getNome())
            || execution(java.lang.String models.mercadoria.IMercadoria.getCor())
            || execution(java.lang.String models.mercadoria.IMercadoria.getTamanho())
            || execution(java.lang.String models.mercadoria.IMercadoria.getProduto())
            || execution(void models.mercadoria.IMercadoria.setPreco(double))
            || execution(void models.mercadoria.IMercadoria.setNome(java.lang.String))
            || execution(void models.mercadoria.IMercadoria.setCor(java.lang.String))
            || execution(void models.mercadoria.IMercadoria.setTamanho(java.lang.String))
            || execution(void models.mercadoria.IMercadoria.setProduto(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IMercadoria{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IMercadoria, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.mercadoria.IMercadoria+.*(..))
            || execution(models.mercadoria.IMercadoria+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
