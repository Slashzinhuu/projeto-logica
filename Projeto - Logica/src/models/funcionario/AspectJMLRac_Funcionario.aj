package models.funcionario;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Funcionario {












  /** Generated by JML to access the model field inome. */
  before (models.funcionario.IFuncionario object$rac): get(java.lang.String models.funcionario.IFuncionario.inome) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.inome = ((java.lang.String) (((models.funcionario.Funcionario)object$rac).nome));
  }

  /** Generated by JML to access the model field irg. */
  before (models.funcionario.IFuncionario object$rac): get(java.lang.String models.funcionario.IFuncionario.irg) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.irg = ((java.lang.String) (((models.funcionario.Funcionario)object$rac).rg));
  }

  /** Generated by JML to access the model field icpf. */
  before (models.funcionario.IFuncionario object$rac): get(java.lang.String models.funcionario.IFuncionario.icpf) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.icpf = ((java.lang.String) (((models.funcionario.Funcionario)object$rac).cpf));
  }

  /** Generated by JML to access the model field idataNascimento. */
  before (models.funcionario.IFuncionario object$rac): get(java.lang.String models.funcionario.IFuncionario.idataNascimento) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.idataNascimento = ((java.lang.String) (((models.funcionario.Funcionario)object$rac).dataNascimento));
  }

  /** Generated by JML to access the model field icargo. */
  before (models.funcionario.IFuncionario object$rac): get(java.lang.String models.funcionario.IFuncionario.icargo) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.icargo = ((java.lang.String) (((models.funcionario.Funcionario)object$rac).cargo));
  }

  /** Generated by JML to access the model field isalario. */
  before (models.funcionario.IFuncionario object$rac): get(double models.funcionario.IFuncionario.isalario) && target (object$rac)
  && if (object$rac instanceof models.funcionario.Funcionario){
    object$rac.isalario = ((models.funcionario.Funcionario)object$rac).salario;
  }

  /** Generated by JML to check the exceptional postcondition of
   * method getNome. */
  after (final models.funcionario.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.Funcionario.getNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.getNome regarding code at \nFile \"models.funcionario.Funcionario.java\", line 42 (models.funcionario.Funcionario.java:42)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.getNome()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getRg. */
  after (final models.funcionario.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.Funcionario.getRg()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.getRg()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.getRg regarding code at \nFile \"models.funcionario.Funcionario.java\", line 46 (models.funcionario.Funcionario.java:46)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.getRg()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getCpf. */
  after (final models.funcionario.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.Funcionario.getCpf()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.getCpf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.getCpf regarding code at \nFile \"models.funcionario.Funcionario.java\", line 50 (models.funcionario.Funcionario.java:50)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.getCpf()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataNascimento. */
  after (final models.funcionario.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.Funcionario.getDataNascimento()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.getDataNascimento()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.getDataNascimento regarding code at \nFile \"models.funcionario.Funcionario.java\", line 54 (models.funcionario.Funcionario.java:54)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.getDataNascimento()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getCargo. */
  after (final models.funcionario.Funcionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.Funcionario.getCargo()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.getCargo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.getCargo regarding code at \nFile \"models.funcionario.Funcionario.java\", line 58 (models.funcionario.Funcionario.java:58)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.getCargo()");
  	 }

  /** Generated by JML to check non-static invariants of 
   * class Funcionario. */
  before (final models.funcionario.Funcionario object$rac) :
     execution(!static * models.funcionario.Funcionario+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = (((((((((((object$rac.nome != null) && (object$rac.rg != null)) && (object$rac.cpf != null)) && (object$rac.dataNascimento != null)) && (object$rac.cargo != null)) && (object$rac.salario >= +0.0D)) && (object$rac.nome != null)) && (object$rac.rg != null)) && (object$rac.cpf != null)) && (object$rac.dataNascimento != null)) && (object$rac.cargo != null));
       String invErrorMsg = "@pre <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 31, character 29 (Funcionario.java:31), line 32, character 29 (Funcionario.java:32), line 33, character 29 (Funcionario.java:33), line 34, character 29 (Funcionario.java:34), line 35, character 29 (Funcionario.java:35), line 36, character 29 (Funcionario.java:36), when \n\tnon_null field 'this.nome' is "+object$rac.nome+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnon_null field 'this.dataNascimento' is "+object$rac.dataNascimento+"\n\tnon_null field 'this.cargo' is "+object$rac.cargo+"\n\tnullable field 'this.salario' is "+object$rac.salario;
       String evalErrorMsg = "Invalid expression in \"@pre <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 31, character 29 (Funcionario.java:31), line 32, character 29 (Funcionario.java:32), line 33, character 29 (Funcionario.java:33), line 34, character 29 (Funcionario.java:34), line 35, character 29 (Funcionario.java:35), line 36, character 29 (Funcionario.java:36), when \n\tnon_null field 'this.nome' is "+object$rac.nome+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnon_null field 'this.dataNascimento' is "+object$rac.dataNascimento+"\n\tnon_null field 'this.cargo' is "+object$rac.cargo+"\n\tnullable field 'this.salario' is "+object$rac.salario+"\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.funcionario.Funcionario object$rac, final java.lang.String nome) :
     execution(void models.funcionario.Funcionario.setNome(java.lang.String)) && 
     this(object$rac) && args(nome) {
       boolean rac$b = (nome != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Funcionario.setNome regarding code at \nFile \"models.funcionario.Funcionario.java\", line 66 (models.funcionario.Funcionario.java:66)"+", when \n"+"\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setNome(java.lang.String nome)");

     }

  /** Generated by JML to check the precondition of
   * method setRg. */
  before (final models.funcionario.Funcionario object$rac, final java.lang.String rg) :
     execution(void models.funcionario.Funcionario.setRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Funcionario.setRg regarding code at \nFile \"models.funcionario.Funcionario.java\", line 70 (models.funcionario.Funcionario.java:70)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method setCpf. */
  before (final models.funcionario.Funcionario object$rac, final java.lang.String cpf) :
     execution(void models.funcionario.Funcionario.setCpf(java.lang.String)) && 
     this(object$rac) && args(cpf) {
       boolean rac$b = (cpf != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Funcionario.setCpf regarding code at \nFile \"models.funcionario.Funcionario.java\", line 74 (models.funcionario.Funcionario.java:74)"+", when \n"+"\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setCpf(java.lang.String cpf)");

     }

  /** Generated by JML to check the precondition of
   * method setDataNascimento. */
  before (final models.funcionario.Funcionario object$rac, final java.lang.String dataNascimento) :
     execution(void models.funcionario.Funcionario.setDataNascimento(java.lang.String)) && 
     this(object$rac) && args(dataNascimento) {
       boolean rac$b = (dataNascimento != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Funcionario.setDataNascimento regarding code at \nFile \"models.funcionario.Funcionario.java\", line 78 (models.funcionario.Funcionario.java:78)"+", when \n"+"\t\'dataNascimento\' is "+dataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setDataNascimento(java.lang.String dataNascimento)");

     }

  /** Generated by JML to check the precondition of
   * method setCargo. */
  before (final models.funcionario.Funcionario object$rac, final java.lang.String cargo) :
     execution(void models.funcionario.Funcionario.setCargo(java.lang.String)) && 
     this(object$rac) && args(cargo) {
       boolean rac$b = (cargo != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Funcionario.setCargo regarding code at \nFile \"models.funcionario.Funcionario.java\", line 82 (models.funcionario.Funcionario.java:82)"+", when \n"+"\t\'cargo\' is "+cargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setCargo(java.lang.String cargo)");

     }

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method setSalario. */
  void around (final models.funcionario.Funcionario object$rac, final double novoSalario) :
     execution(void models.funcionario.Funcionario.setSalario(double))
     && this(object$rac) && args(novoSalario) {
      boolean rac$b = true;
      final double rac$old0;
      try {
        // saving all old values
  		rac$old0 = object$rac.salario;
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"models.funcionario.Funcionario.java\" by method models.funcionario.Funcionario.setSalario regarding specifications at \n[spec-case]: line 87, character 31 (models.funcionario.Funcionario.java:87), line 88, character 38 (models.funcionario.Funcionario.java:88)"+", when \n"+"\t\'this.salario\' is "+object$rac.salario+"\n\t\'novoSalario\' is "+novoSalario+"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method models.funcionario.Funcionario.setSalario regarding specifications at \nFile \"models.funcionario.Funcionario.java\", [spec-case]: line 86, character 36 (models.funcionario.Funcionario.java:86), and \nby method models.funcionario.Funcionario.setSalario regarding code at \nFile \"models.funcionario.Funcionario.java\", line 90 (models.funcionario.Funcionario.java:90)"+", when \n"+"\t\'novoSalario\' is "+novoSalario;
      String evalPreErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\" by method models.funcionario.Funcionario.setSalario regarding specifications at \n[spec-case]: line 86, character 36 (models.funcionario.Funcionario.java:86)"+", when \n"+"\t\'novoSalario\' is "+novoSalario+"\nCaused by: ";
      try {
        rac$b = (novoSalario >= +0.0D);
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "models.funcionario.Funcionario.setSalario(double novoSalario)");
      try {
        proceed(object$rac, novoSalario);//executing the method
        rac$b = (!(novoSalario >= +0.0D) || ((object$rac.salario == novoSalario) && (rac$old0 <= object$rac.salario)));
        String nPostErrorMsg =  "by method models.funcionario.Funcionario.setSalario regarding specifications at \nFile \"models.funcionario.Funcionario.java\", [spec-case]: line 87, character 31 (models.funcionario.Funcionario.java:87), line 88, character 38 (models.funcionario.Funcionario.java:88), and \nby method models.funcionario.Funcionario.setSalario regarding code at \nFile \"models.funcionario.Funcionario.java\", line 90 (models.funcionario.Funcionario.java:90)"+", when \n"+"\t\'this.salario\' is "+object$rac.salario+"\n\t\'novoSalario\' is "+novoSalario;
        String evalErrorMsg = "Invalid expression in \"models.funcionario.Funcionario.java\" by method models.funcionario.Funcionario.setSalario regarding specifications at \n[spec-case]: line 87, character 31 (models.funcionario.Funcionario.java:87), line 88, character 38 (models.funcionario.Funcionario.java:88)"+", when \n"+"\t\'this.salario\' is "+object$rac.salario+"\n\t\'novoSalario\' is "+novoSalario+"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Funcionario.setSalario(double novoSalario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Funcionario.setSalario(double novoSalario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (novoSalario >= +0.0D)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.Funcionario.java\" by method models.funcionario.Funcionario.setSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.Funcionario.setSalario regarding code at \nFile \"models.funcionario.Funcionario.java\", line 90 (models.funcionario.Funcionario.java:90)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Funcionario.setSalario(double novoSalario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check non-static constraints of 
   * class Funcionario. */
  Object around (final models.funcionario.Funcionario object$rac) :
     (execution(!static * models.funcionario.Funcionario+.*(..)) && 
     !execution(void models.funcionario.Funcionario.finalize() throws Throwable)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
      Object rac$result = null;
      final double rac$old0;
      try {
        // saving all old values
  		rac$old0 = object$rac.salario;
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)"+"\nCaused by: "+rac$cause);
       }
      boolean rac$b = true;
      try {
        rac$result = proceed(object$rac);//executing the method
        rac$b = (rac$old0 <= object$rac.salario);
         JMLChecker.checkConstraint(rac$b, "@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)", "Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)"+"\nCaused by: ", -1, false);
       } catch (Throwable rac$e) {
           if(rac$e instanceof JMLEvaluationError){
             throw new JMLEvaluationError("Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)"+"\nCaused by: "+rac$e);
           }
           JMLChecker.rethrowJMLAssertionError(rac$e, "");
           rac$b = true;
           try  {
             rac$b = (rac$old0 <= object$rac.salario);
             JMLChecker.checkConstraint(rac$b, "@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)", "Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)"+"\nCaused by: ", -1, false);         } catch (Throwable rac$cause) {
               if (rac$cause instanceof JMLHistoryConstraintError) {
                 throw (JMLHistoryConstraintError) rac$e;
               }
               else {
                 throw new JMLEvaluationError("Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 37, character 30 (Funcionario.java:37)"+"\nCaused by: "+rac$e);
               }
           }
         }
      return rac$result;
     }


  /** Generated by JML to check non-static invariants of 
   * class Funcionario. */
  after (final models.funcionario.Funcionario object$rac) :
     (execution(!static * models.funcionario.Funcionario+.*(..)) || 
       execution(models.funcionario.Funcionario+.new(..))) && 
     !execution(void models.funcionario.Funcionario.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = (((((((((((object$rac.nome != null) && (object$rac.rg != null)) && (object$rac.cpf != null)) && (object$rac.dataNascimento != null)) && (object$rac.cargo != null)) && (object$rac.salario >= +0.0D)) && (object$rac.nome != null)) && (object$rac.rg != null)) && (object$rac.cpf != null)) && (object$rac.dataNascimento != null)) && (object$rac.cargo != null));
         String invErrorMsg = "@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 31, character 29 (Funcionario.java:31), line 32, character 29 (Funcionario.java:32), line 33, character 29 (Funcionario.java:33), line 34, character 29 (Funcionario.java:34), line 35, character 29 (Funcionario.java:35), line 36, character 29 (Funcionario.java:36), when \n\tnon_null field 'this.nome' is "+object$rac.nome+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnon_null field 'this.dataNascimento' is "+object$rac.dataNascimento+"\n\tnon_null field 'this.cargo' is "+object$rac.cargo+"\n\tnullable field 'this.salario' is "+object$rac.salario;
         String evalErrorMsg = "Invalid expression in \"@post <File \"Funcionario.java\"> regarding specifications at \nFile \"Funcionario.java\", line 31, character 29 (Funcionario.java:31), line 32, character 29 (Funcionario.java:32), line 33, character 29 (Funcionario.java:33), line 34, character 29 (Funcionario.java:34), line 35, character 29 (Funcionario.java:35), line 36, character 29 (Funcionario.java:36), when \n\tnon_null field 'this.nome' is "+object$rac.nome+"\n\tnon_null field 'this.rg' is "+object$rac.rg+"\n\tnon_null field 'this.cpf' is "+object$rac.cpf+"\n\tnon_null field 'this.dataNascimento' is "+object$rac.dataNascimento+"\n\tnon_null field 'this.cargo' is "+object$rac.cargo+"\n\tnullable field 'this.salario' is "+object$rac.salario+"\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Funcionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Funcionario;
    before(): (execution(void models.funcionario.Funcionario.setNome(java.lang.String))
            || execution(void models.funcionario.Funcionario.setRg(java.lang.String))
            || execution(void models.funcionario.Funcionario.setCpf(java.lang.String))
            || execution(void models.funcionario.Funcionario.setDataNascimento(java.lang.String))
            || execution(void models.funcionario.Funcionario.setCargo(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Funcionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Funcionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.funcionario.Funcionario+.*(..))
            || execution(models.funcionario.Funcionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
