package models.funcionario;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IFuncionario {












  /** Generated by JML to check the exceptional postcondition of
   * method getNome. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getNome()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getRg. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getRg()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getRg()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getRg()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getCpf. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getCpf()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getCpf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getCpf()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataNascimento. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getDataNascimento()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getDataNascimento()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getDataNascimento()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getCargo. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getCargo()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getCargo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getCargo()");
  	 }


  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String nome) :
     execution(void models.funcionario.IFuncionario.setNome(java.lang.String)) && 
     this(object$rac) && args(nome) {
       boolean rac$b = (nome != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.IFuncionario.setNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setNome(java.lang.String nome)");

     }

  /** Generated by JML to check the precondition of
   * method setRg. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String rg) :
     execution(void models.funcionario.IFuncionario.setRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.IFuncionario.setRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method setCpf. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String cpf) :
     execution(void models.funcionario.IFuncionario.setCpf(java.lang.String)) && 
     this(object$rac) && args(cpf) {
       boolean rac$b = (cpf != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.IFuncionario.setCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCpf(java.lang.String cpf)");

     }

  /** Generated by JML to check the precondition of
   * method setDataNascimento. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String dataNascimento) :
     execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String)) && 
     this(object$rac) && args(dataNascimento) {
       boolean rac$b = (dataNascimento != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'dataNascimento\' is "+dataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setDataNascimento(java.lang.String dataNascimento)");

     }

  /** Generated by JML to check the precondition of
   * method setCargo. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String cargo) :
     execution(void models.funcionario.IFuncionario.setCargo(java.lang.String)) && 
     this(object$rac) && args(cargo) {
       boolean rac$b = (cargo != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.IFuncionario.setCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'cargo\' is "+cargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCargo(java.lang.String cargo)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IFuncionario;
    before(): (execution(void models.funcionario.IFuncionario.setNome(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setRg(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setCpf(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setCargo(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.funcionario.IFuncionario+.*(..))
            || execution(models.funcionario.IFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
