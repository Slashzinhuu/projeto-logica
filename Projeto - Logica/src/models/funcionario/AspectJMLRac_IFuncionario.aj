package models.funcionario;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IFuncionario {












  /** Generated by JML to implement the instance model field icpf. */
  private java.lang.String models.funcionario.IFuncionario.icpf;

  /** Generated by JML to implement the instance model field isalario. */
  private double models.funcionario.IFuncionario.isalario;

  /** Generated by JML to implement the instance model field idataNascimento. */
  private java.lang.String models.funcionario.IFuncionario.idataNascimento;

  /** Generated by JML to implement the instance model field irg. */
  private java.lang.String models.funcionario.IFuncionario.irg;

  /** Generated by JML to implement the instance model field inome. */
  private java.lang.String models.funcionario.IFuncionario.inome;

  /** Generated by JML to implement the instance model field icargo. */
  private java.lang.String models.funcionario.IFuncionario.icargo;

  /** Generated by JML to check the normal postcondition of
   * method getNome. */
  after (final models.funcionario.IFuncionario object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.funcionario.IFuncionario.getNome()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.inome)));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 12, character 31 (models.funcionario.IFuncionario.java:12), when \n\t\'this.inome\' is "+object$rac.inome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getNome regarding specifications at \n[spec-case]: line 12, character 31 (models.funcionario.IFuncionario.java:12)"+", when \n\t\'this.inome\' is "+object$rac.inome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getNome()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getNome. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getNome()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getRg. */
  after (final models.funcionario.IFuncionario object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.funcionario.IFuncionario.getRg()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.irg)));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 16, character 31 (models.funcionario.IFuncionario.java:16), when \n\t\'this.irg\' is "+object$rac.irg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getRg regarding specifications at \n[spec-case]: line 16, character 31 (models.funcionario.IFuncionario.java:16)"+", when \n\t\'this.irg\' is "+object$rac.irg+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getRg()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getRg. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getRg()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getRg()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getRg\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getRg()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getCpf. */
  after (final models.funcionario.IFuncionario object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.funcionario.IFuncionario.getCpf()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.icpf)));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 20, character 31 (models.funcionario.IFuncionario.java:20), when \n\t\'this.icpf\' is "+object$rac.icpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCpf regarding specifications at \n[spec-case]: line 20, character 31 (models.funcionario.IFuncionario.java:20)"+", when \n\t\'this.icpf\' is "+object$rac.icpf+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getCpf()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getCpf. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getCpf()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getCpf()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCpf\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getCpf()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getDataNascimento. */
  after (final models.funcionario.IFuncionario object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.funcionario.IFuncionario.getDataNascimento()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.idataNascimento)));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 24, character 31 (models.funcionario.IFuncionario.java:24), when \n\t\'this.idataNascimento\' is "+object$rac.idataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \n[spec-case]: line 24, character 31 (models.funcionario.IFuncionario.java:24)"+", when \n\t\'this.idataNascimento\' is "+object$rac.idataNascimento+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getDataNascimento()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataNascimento. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getDataNascimento()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getDataNascimento()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getDataNascimento\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getDataNascimento()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getCargo. */
  after (final models.funcionario.IFuncionario object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.funcionario.IFuncionario.getCargo()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.icargo)));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 28, character 31 (models.funcionario.IFuncionario.java:28), when \n\t\'this.icargo\' is "+object$rac.icargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCargo regarding specifications at \n[spec-case]: line 28, character 31 (models.funcionario.IFuncionario.java:28)"+", when \n\t\'this.icargo\' is "+object$rac.icargo+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getCargo()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getCargo. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.funcionario.IFuncionario.getCargo()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getCargo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCargo\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getCargo()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getSalario. */
  after (final models.funcionario.IFuncionario object$rac) returning (double rac$result) :
     execution(double models.funcionario.IFuncionario.getSalario()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.isalario));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.getSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 32, character 31 (models.funcionario.IFuncionario.java:32), when \n\t\'this.isalario\' is "+object$rac.isalario;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getSalario regarding specifications at \n[spec-case]: line 32, character 31 (models.funcionario.IFuncionario.java:32)"+", when \n\t\'this.isalario\' is "+object$rac.isalario+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getSalario()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getSalario. */
  after (final models.funcionario.IFuncionario object$rac) throwing (Throwable rac$e) :
     execution(double models.funcionario.IFuncionario.getSalario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.getSalario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.getSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.getSalario()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setNome. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoNome) returning () :
     execution(void models.funcionario.IFuncionario.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
       boolean rac$b = (!((novoNome != null) && (novoNome != null)) || (object$rac.inome == novoNome));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 39, character 29 (models.funcionario.IFuncionario.java:39), when \n\t\'this.inome\' is "+object$rac.inome+"\n\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setNome regarding specifications at \n[spec-case]: line 39, character 29 (models.funcionario.IFuncionario.java:39)"+", when \n\t\'this.inome\' is "+object$rac.inome+"\n\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setNome. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoNome) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setNome(java.lang.String novoNome)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoNome != null) && (novoNome != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setNome(java.lang.String novoNome)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setRg. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoRg) returning () :
     execution(void models.funcionario.IFuncionario.setRg(java.lang.String)) && this(object$rac) && args(novoRg) {
       boolean rac$b = (!((novoRg != null) && (novoRg != null)) || (object$rac.irg == novoRg));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 45, character 27 (models.funcionario.IFuncionario.java:45), when \n\t\'this.irg\' is "+object$rac.irg+"\n\t\'novoRg\' is "+novoRg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setRg regarding specifications at \n[spec-case]: line 45, character 27 (models.funcionario.IFuncionario.java:45)"+", when \n\t\'this.irg\' is "+object$rac.irg+"\n\t\'novoRg\' is "+novoRg+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setRg(java.lang.String novoRg)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setRg. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoRg) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setRg(java.lang.String)) && this(object$rac) && args(novoRg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setRg(java.lang.String novoRg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoRg != null) && (novoRg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setRg\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setRg(java.lang.String novoRg)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setCpf. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCpf) returning () :
     execution(void models.funcionario.IFuncionario.setCpf(java.lang.String)) && this(object$rac) && args(novoCpf) {
       boolean rac$b = (!((novoCpf != null) && (novoCpf != null)) || (object$rac.icpf == novoCpf));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 51, character 28 (models.funcionario.IFuncionario.java:51), when \n\t\'this.icpf\' is "+object$rac.icpf+"\n\t\'novoCpf\' is "+novoCpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCpf regarding specifications at \n[spec-case]: line 51, character 28 (models.funcionario.IFuncionario.java:51)"+", when \n\t\'this.icpf\' is "+object$rac.icpf+"\n\t\'novoCpf\' is "+novoCpf+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCpf(java.lang.String novoCpf)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setCpf. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCpf) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setCpf(java.lang.String)) && this(object$rac) && args(novoCpf) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setCpf(java.lang.String novoCpf)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoCpf != null) && (novoCpf != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCpf\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setCpf(java.lang.String novoCpf)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setDataNascimento. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novaDataNascimento) returning () :
     execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String)) && this(object$rac) && args(novaDataNascimento) {
       boolean rac$b = (!((novaDataNascimento != null) && (novaDataNascimento != null)) || (object$rac.idataNascimento == novaDataNascimento));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 57, character 39 (models.funcionario.IFuncionario.java:57), when \n\t\'this.idataNascimento\' is "+object$rac.idataNascimento+"\n\t\'novaDataNascimento\' is "+novaDataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \n[spec-case]: line 57, character 39 (models.funcionario.IFuncionario.java:57)"+", when \n\t\'this.idataNascimento\' is "+object$rac.idataNascimento+"\n\t\'novaDataNascimento\' is "+novaDataNascimento+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setDataNascimento(java.lang.String novaDataNascimento)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setDataNascimento. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novaDataNascimento) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String)) && this(object$rac) && args(novaDataNascimento) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setDataNascimento(java.lang.String novaDataNascimento)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novaDataNascimento != null) && (novaDataNascimento != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setDataNascimento\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setDataNascimento(java.lang.String novaDataNascimento)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setCargo. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCargo) returning () :
     execution(void models.funcionario.IFuncionario.setCargo(java.lang.String)) && this(object$rac) && args(novoCargo) {
       boolean rac$b = (!((novoCargo != null) && (novoCargo != null)) || (object$rac.icargo == novoCargo));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 63, character 30 (models.funcionario.IFuncionario.java:63), when \n\t\'this.icargo\' is "+object$rac.icargo+"\n\t\'novoCargo\' is "+novoCargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCargo regarding specifications at \n[spec-case]: line 63, character 30 (models.funcionario.IFuncionario.java:63)"+", when \n\t\'this.icargo\' is "+object$rac.icargo+"\n\t\'novoCargo\' is "+novoCargo+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCargo(java.lang.String novoCargo)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setCargo. */
  after (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCargo) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setCargo(java.lang.String)) && this(object$rac) && args(novoCargo) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setCargo(java.lang.String novoCargo)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoCargo != null) && (novoCargo != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCargo\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setCargo(java.lang.String novoCargo)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setSalario. */
  after (final models.funcionario.IFuncionario object$rac, final double novoSalario) returning () :
     execution(void models.funcionario.IFuncionario.setSalario(double)) && this(object$rac) && args(novoSalario) {
       boolean rac$b = (!(novoSalario >= +0.0D) || (object$rac.isalario == novoSalario));
       String nPostErrorMsg =  "by method models.funcionario.IFuncionario.setSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", [spec-case]: line 69, character 32 (models.funcionario.IFuncionario.java:69), when \n\t\'this.isalario\' is "+object$rac.isalario+"\n\t\'novoSalario\' is "+novoSalario;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setSalario regarding specifications at \n[spec-case]: line 69, character 32 (models.funcionario.IFuncionario.java:69)"+", when \n\t\'this.isalario\' is "+object$rac.isalario+"\n\t\'novoSalario\' is "+novoSalario+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setSalario(double novoSalario)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setSalario. */
  after (final models.funcionario.IFuncionario object$rac, final double novoSalario) throwing (Throwable rac$e) :
     execution(void models.funcionario.IFuncionario.setSalario(double)) && this(object$rac) && args(novoSalario) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.IFuncionario.setSalario(double novoSalario)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (novoSalario >= +0.0D)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.IFuncionario.setSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.IFuncionario.setSalario(double novoSalario)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * interface IFuncionario. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(!static * models.funcionario.IFuncionario+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = (((((object$rac.inome != null) && (object$rac.irg != null)) && (object$rac.icpf != null)) && (object$rac.idataNascimento != null)) && (object$rac.icargo != null));
       String invErrorMsg = "@pre <File \"IFuncionario.java\"> regarding code at \nFile \"IFuncionario.java\"\nnon_null for field 'inome' <File \"models.funcionario.IFuncionario.java\", line 4, character 48 (models.funcionario.IFuncionario.java:4)>\nnon_null for field 'irg' <File \"models.funcionario.IFuncionario.java\", line 5, character 46 (models.funcionario.IFuncionario.java:5)>\nnon_null for field 'icpf' <File \"models.funcionario.IFuncionario.java\", line 6, character 47 (models.funcionario.IFuncionario.java:6)>\nnon_null for field 'idataNascimento' <File \"models.funcionario.IFuncionario.java\", line 7, character 58 (models.funcionario.IFuncionario.java:7)>\nnon_null for field 'icargo' <File \"models.funcionario.IFuncionario.java\", line 8, character 49 (models.funcionario.IFuncionario.java:8)>\n";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"IFuncionario.java\"> regarding code at \nFile \"IFuncionario.java\"\nnon_null for field 'inome' <File \"models.funcionario.IFuncionario.java\", line 4, character 48 (models.funcionario.IFuncionario.java:4)>\nnon_null for field 'irg' <File \"models.funcionario.IFuncionario.java\", line 5, character 46 (models.funcionario.IFuncionario.java:5)>\nnon_null for field 'icpf' <File \"models.funcionario.IFuncionario.java\", line 6, character 47 (models.funcionario.IFuncionario.java:6)>\nnon_null for field 'idataNascimento' <File \"models.funcionario.IFuncionario.java\", line 7, character 58 (models.funcionario.IFuncionario.java:7)>\nnon_null for field 'icargo' <File \"models.funcionario.IFuncionario.java\", line 8, character 49 (models.funcionario.IFuncionario.java:8)>\n\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method getNome. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(java.lang.String models.funcionario.IFuncionario.getNome()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 12, character 20 (models.funcionario.IFuncionario.java:12), and \nby method models.funcionario.IFuncionario.getNome regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getNome regarding specifications at \n[spec-case]: line 12, character 20 (models.funcionario.IFuncionario.java:12)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getNome()");

     }

  /** Generated by JML to check the precondition of
   * method getRg. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(java.lang.String models.funcionario.IFuncionario.getRg()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 16, character 20 (models.funcionario.IFuncionario.java:16), and \nby method models.funcionario.IFuncionario.getRg regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getRg regarding specifications at \n[spec-case]: line 16, character 20 (models.funcionario.IFuncionario.java:16)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getRg()");

     }

  /** Generated by JML to check the precondition of
   * method getCpf. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(java.lang.String models.funcionario.IFuncionario.getCpf()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 20, character 20 (models.funcionario.IFuncionario.java:20), and \nby method models.funcionario.IFuncionario.getCpf regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCpf regarding specifications at \n[spec-case]: line 20, character 20 (models.funcionario.IFuncionario.java:20)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getCpf()");

     }

  /** Generated by JML to check the precondition of
   * method getDataNascimento. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(java.lang.String models.funcionario.IFuncionario.getDataNascimento()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 24, character 20 (models.funcionario.IFuncionario.java:24), and \nby method models.funcionario.IFuncionario.getDataNascimento regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getDataNascimento regarding specifications at \n[spec-case]: line 24, character 20 (models.funcionario.IFuncionario.java:24)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getDataNascimento()");

     }

  /** Generated by JML to check the precondition of
   * method getCargo. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(java.lang.String models.funcionario.IFuncionario.getCargo()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 28, character 20 (models.funcionario.IFuncionario.java:28), and \nby method models.funcionario.IFuncionario.getCargo regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getCargo regarding specifications at \n[spec-case]: line 28, character 20 (models.funcionario.IFuncionario.java:28)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getCargo()");

     }

  /** Generated by JML to check the precondition of
   * method getSalario. */
  before (final models.funcionario.IFuncionario object$rac) :
     execution(double models.funcionario.IFuncionario.getSalario()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 32, character 20 (models.funcionario.IFuncionario.java:32), and \nby method models.funcionario.IFuncionario.getSalario regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.getSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.getSalario regarding specifications at \n[spec-case]: line 32, character 20 (models.funcionario.IFuncionario.java:32)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.getSalario()");

     }

  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String novoNome) :
     execution(void models.funcionario.IFuncionario.setNome(java.lang.String)) && 
     this(object$rac) && args(novoNome) {
       boolean rac$b = ((novoNome != null) && (novoNome != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 37, character 33 (models.funcionario.IFuncionario.java:37), and \nby method models.funcionario.IFuncionario.setNome regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setNome regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setNome regarding specifications at \n[spec-case]: line 37, character 33 (models.funcionario.IFuncionario.java:37)"+", when \n"+"\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the precondition of
   * method setRg. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String novoRg) :
     execution(void models.funcionario.IFuncionario.setRg(java.lang.String)) && 
     this(object$rac) && args(novoRg) {
       boolean rac$b = ((novoRg != null) && (novoRg != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 43, character 31 (models.funcionario.IFuncionario.java:43), and \nby method models.funcionario.IFuncionario.setRg regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setRg regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novoRg\' is "+novoRg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setRg regarding specifications at \n[spec-case]: line 43, character 31 (models.funcionario.IFuncionario.java:43)"+", when \n"+"\t\'novoRg\' is "+novoRg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setRg(java.lang.String novoRg)");

     }

  /** Generated by JML to check the precondition of
   * method setCpf. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCpf) :
     execution(void models.funcionario.IFuncionario.setCpf(java.lang.String)) && 
     this(object$rac) && args(novoCpf) {
       boolean rac$b = ((novoCpf != null) && (novoCpf != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 49, character 32 (models.funcionario.IFuncionario.java:49), and \nby method models.funcionario.IFuncionario.setCpf regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setCpf regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novoCpf\' is "+novoCpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCpf regarding specifications at \n[spec-case]: line 49, character 32 (models.funcionario.IFuncionario.java:49)"+", when \n"+"\t\'novoCpf\' is "+novoCpf+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCpf(java.lang.String novoCpf)");

     }

  /** Generated by JML to check the precondition of
   * method setDataNascimento. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String novaDataNascimento) :
     execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String)) && 
     this(object$rac) && args(novaDataNascimento) {
       boolean rac$b = ((novaDataNascimento != null) && (novaDataNascimento != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 55, character 43 (models.funcionario.IFuncionario.java:55), and \nby method models.funcionario.IFuncionario.setDataNascimento regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novaDataNascimento\' is "+novaDataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setDataNascimento regarding specifications at \n[spec-case]: line 55, character 43 (models.funcionario.IFuncionario.java:55)"+", when \n"+"\t\'novaDataNascimento\' is "+novaDataNascimento+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setDataNascimento(java.lang.String novaDataNascimento)");

     }

  /** Generated by JML to check the precondition of
   * method setCargo. */
  before (final models.funcionario.IFuncionario object$rac, final java.lang.String novoCargo) :
     execution(void models.funcionario.IFuncionario.setCargo(java.lang.String)) && 
     this(object$rac) && args(novoCargo) {
       boolean rac$b = ((novoCargo != null) && (novoCargo != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 61, character 34 (models.funcionario.IFuncionario.java:61), and \nby method models.funcionario.IFuncionario.setCargo regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setCargo regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novoCargo\' is "+novoCargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setCargo regarding specifications at \n[spec-case]: line 61, character 34 (models.funcionario.IFuncionario.java:61)"+", when \n"+"\t\'novoCargo\' is "+novoCargo+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setCargo(java.lang.String novoCargo)");

     }

  /** Generated by JML to check the precondition of
   * method setSalario. */
  before (final models.funcionario.IFuncionario object$rac, final double novoSalario) :
     execution(void models.funcionario.IFuncionario.setSalario(double)) && 
     this(object$rac) && args(novoSalario) {
       boolean rac$b = (novoSalario >= +0.0D);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 67, character 36 (models.funcionario.IFuncionario.java:67), and \nby method models.funcionario.IFuncionario.setSalario regarding code at \nFile \"models.funcionario.IFuncionario.java\"by method models.funcionario.IFuncionario.setSalario regarding specifications at \nFile \"models.funcionario.IFuncionario.java\", when \n\t\'novoSalario\' is "+novoSalario;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.IFuncionario.java\" by method models.funcionario.IFuncionario.setSalario regarding specifications at \n[spec-case]: line 67, character 36 (models.funcionario.IFuncionario.java:67)"+", when \n"+"\t\'novoSalario\' is "+novoSalario+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.IFuncionario.setSalario(double novoSalario)");

     }


  /** Generated by JML to check non-static invariants of 
   * interface IFuncionario. */
  after (final models.funcionario.IFuncionario object$rac) :
     (execution(!static * models.funcionario.IFuncionario+.*(..)) || 
       execution(models.funcionario.IFuncionario+.new(..))) && 
     !execution(void models.funcionario.IFuncionario.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = (((((object$rac.inome != null) && (object$rac.irg != null)) && (object$rac.icpf != null)) && (object$rac.idataNascimento != null)) && (object$rac.icargo != null));
         String invErrorMsg = "@post <File \"IFuncionario.java\"> regarding code at \nFile \"IFuncionario.java\"\nnon_null for field 'inome' <File \"models.funcionario.IFuncionario.java\", line 4, character 48 (models.funcionario.IFuncionario.java:4)>\nnon_null for field 'irg' <File \"models.funcionario.IFuncionario.java\", line 5, character 46 (models.funcionario.IFuncionario.java:5)>\nnon_null for field 'icpf' <File \"models.funcionario.IFuncionario.java\", line 6, character 47 (models.funcionario.IFuncionario.java:6)>\nnon_null for field 'idataNascimento' <File \"models.funcionario.IFuncionario.java\", line 7, character 58 (models.funcionario.IFuncionario.java:7)>\nnon_null for field 'icargo' <File \"models.funcionario.IFuncionario.java\", line 8, character 49 (models.funcionario.IFuncionario.java:8)>\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"IFuncionario.java\"> regarding code at \nFile \"IFuncionario.java\"\nnon_null for field 'inome' <File \"models.funcionario.IFuncionario.java\", line 4, character 48 (models.funcionario.IFuncionario.java:4)>\nnon_null for field 'irg' <File \"models.funcionario.IFuncionario.java\", line 5, character 46 (models.funcionario.IFuncionario.java:5)>\nnon_null for field 'icpf' <File \"models.funcionario.IFuncionario.java\", line 6, character 47 (models.funcionario.IFuncionario.java:6)>\nnon_null for field 'idataNascimento' <File \"models.funcionario.IFuncionario.java\", line 7, character 58 (models.funcionario.IFuncionario.java:7)>\nnon_null for field 'icargo' <File \"models.funcionario.IFuncionario.java\", line 8, character 49 (models.funcionario.IFuncionario.java:8)>\n\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IFuncionario;
    before(): (execution(java.lang.String models.funcionario.IFuncionario.getNome())
            || execution(java.lang.String models.funcionario.IFuncionario.getRg())
            || execution(java.lang.String models.funcionario.IFuncionario.getCpf())
            || execution(java.lang.String models.funcionario.IFuncionario.getDataNascimento())
            || execution(java.lang.String models.funcionario.IFuncionario.getCargo())
            || execution(double models.funcionario.IFuncionario.getSalario())
            || execution(void models.funcionario.IFuncionario.setNome(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setRg(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setCpf(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setDataNascimento(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setCargo(java.lang.String))
            || execution(void models.funcionario.IFuncionario.setSalario(double))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.funcionario.IFuncionario+.*(..))
            || execution(models.funcionario.IFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
