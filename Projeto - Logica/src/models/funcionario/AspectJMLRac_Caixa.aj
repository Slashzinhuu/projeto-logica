package models.funcionario;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Caixa {







  /** Generated by JML to check the normal postcondition of
   * method setCargo. */
  after (final models.funcionario.Caixa object$rac, final java.lang.String cargo) returning () :
     execution(void models.funcionario.Caixa.setCargo(java.lang.String)) && this(object$rac) && args(cargo) {
       boolean rac$b = (!((cargo != null) && true) || cargo.equals(((java.lang.Object) ("Caixa"))));
       String nPostErrorMsg =  "by method models.funcionario.Caixa.setCargo regarding specifications at \nFile \"models.funcionario.Caixa.java\", [spec-case]: line 28, character 41 (models.funcionario.Caixa.java:28), and \nby method models.funcionario.Caixa.setCargo regarding code at \nFile \"models.funcionario.Caixa.java\", line 30 (models.funcionario.Caixa.java:30)"+", when \n"+"\t\'cargo\' is "+cargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\" by method models.funcionario.Caixa.setCargo regarding specifications at \n[spec-case]: line 28, character 41 (models.funcionario.Caixa.java:28)"+", when \n"+"\t\'cargo\' is "+cargo+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setCargo(java.lang.String cargo)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setCargo. */
  after (final models.funcionario.Caixa object$rac, final java.lang.String cargo) throwing (Throwable rac$e) :
     execution(void models.funcionario.Caixa.setCargo(java.lang.String)) && this(object$rac) && args(cargo) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.funcionario.Caixa.setCargo(java.lang.String cargo)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((cargo != null) && true)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.funcionario.Caixa.java\" by method models.funcionario.Caixa.setCargo\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.funcionario.Caixa.setCargo regarding code at \nFile \"models.funcionario.Caixa.java\", line 30 (models.funcionario.Caixa.java:30)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.funcionario.Caixa.setCargo(java.lang.String cargo)");
  	 }


  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.funcionario.Caixa object$rac, final java.lang.String nome) :
     execution(void models.funcionario.Caixa.setNome(java.lang.String)) && 
     this(object$rac) && args(nome) {
       boolean rac$b = (nome != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Caixa.setNome regarding code at \nFile \"models.funcionario.Caixa.java\", line 8 (models.funcionario.Caixa.java:8)"+", when \n"+"\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setNome(java.lang.String nome)");

     }

  /** Generated by JML to check the precondition of
   * method setRg. */
  before (final models.funcionario.Caixa object$rac, final java.lang.String rg) :
     execution(void models.funcionario.Caixa.setRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Caixa.setRg regarding code at \nFile \"models.funcionario.Caixa.java\", line 13 (models.funcionario.Caixa.java:13)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method setCpf. */
  before (final models.funcionario.Caixa object$rac, final java.lang.String cpf) :
     execution(void models.funcionario.Caixa.setCpf(java.lang.String)) && 
     this(object$rac) && args(cpf) {
       boolean rac$b = (cpf != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Caixa.setCpf regarding code at \nFile \"models.funcionario.Caixa.java\", line 18 (models.funcionario.Caixa.java:18)"+", when \n"+"\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setCpf(java.lang.String cpf)");

     }

  /** Generated by JML to check the precondition of
   * method setDataNascimento. */
  before (final models.funcionario.Caixa object$rac, final java.lang.String dataNascimento) :
     execution(void models.funcionario.Caixa.setDataNascimento(java.lang.String)) && 
     this(object$rac) && args(dataNascimento) {
       boolean rac$b = (dataNascimento != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Caixa.setDataNascimento regarding code at \nFile \"models.funcionario.Caixa.java\", line 23 (models.funcionario.Caixa.java:23)"+", when \n"+"\t\'dataNascimento\' is "+dataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setDataNascimento(java.lang.String dataNascimento)");

     }

  /** Generated by JML to check the precondition of
   * method setCargo. */
  before (final models.funcionario.Caixa object$rac, final java.lang.String cargo) :
     execution(void models.funcionario.Caixa.setCargo(java.lang.String)) && 
     this(object$rac) && args(cargo) {
       boolean rac$b = ((cargo != null) && true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Caixa.setCargo regarding specifications at \nFile \"models.funcionario.Caixa.java\", [spec-case]: line 28, character 19 (models.funcionario.Caixa.java:28), and \nby method models.funcionario.Caixa.setCargo regarding code at \nFile \"models.funcionario.Caixa.java\", line 30 (models.funcionario.Caixa.java:30)"+", when \n"+"\t\'cargo\' is "+cargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Caixa.java\" by method models.funcionario.Caixa.setCargo regarding specifications at \n[spec-case]: line 28, character 19 (models.funcionario.Caixa.java:28)"+", when \n"+"\t\'cargo\' is "+cargo+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Caixa.setCargo(java.lang.String cargo)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Caixa{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Caixa;
    before(): (execution(void models.funcionario.Caixa.setNome(java.lang.String))
            || execution(void models.funcionario.Caixa.setRg(java.lang.String))
            || execution(void models.funcionario.Caixa.setCpf(java.lang.String))
            || execution(void models.funcionario.Caixa.setDataNascimento(java.lang.String))
            || execution(void models.funcionario.Caixa.setCargo(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Caixa{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Caixa, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.funcionario.Caixa+.*(..))
            || execution(models.funcionario.Caixa+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
