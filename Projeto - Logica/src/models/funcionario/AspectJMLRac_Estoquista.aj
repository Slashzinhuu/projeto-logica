package models.funcionario;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Estoquista {








  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.funcionario.Estoquista object$rac, final java.lang.String nome) :
     execution(void models.funcionario.Estoquista.setNome(java.lang.String)) && 
     this(object$rac) && args(nome) {
       boolean rac$b = (nome != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Estoquista.setNome regarding code at \nFile \"models.funcionario.Estoquista.java\", line 8 (models.funcionario.Estoquista.java:8)"+", when \n"+"\t\'nome\' is "+nome;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Estoquista.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Estoquista.setNome(java.lang.String nome)");

     }

  /** Generated by JML to check the precondition of
   * method setRg. */
  before (final models.funcionario.Estoquista object$rac, final java.lang.String rg) :
     execution(void models.funcionario.Estoquista.setRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Estoquista.setRg regarding code at \nFile \"models.funcionario.Estoquista.java\", line 13 (models.funcionario.Estoquista.java:13)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Estoquista.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Estoquista.setRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method setCpf. */
  before (final models.funcionario.Estoquista object$rac, final java.lang.String cpf) :
     execution(void models.funcionario.Estoquista.setCpf(java.lang.String)) && 
     this(object$rac) && args(cpf) {
       boolean rac$b = (cpf != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Estoquista.setCpf regarding code at \nFile \"models.funcionario.Estoquista.java\", line 18 (models.funcionario.Estoquista.java:18)"+", when \n"+"\t\'cpf\' is "+cpf;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Estoquista.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Estoquista.setCpf(java.lang.String cpf)");

     }

  /** Generated by JML to check the precondition of
   * method setDataNascimento. */
  before (final models.funcionario.Estoquista object$rac, final java.lang.String dataNascimento) :
     execution(void models.funcionario.Estoquista.setDataNascimento(java.lang.String)) && 
     this(object$rac) && args(dataNascimento) {
       boolean rac$b = (dataNascimento != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Estoquista.setDataNascimento regarding code at \nFile \"models.funcionario.Estoquista.java\", line 23 (models.funcionario.Estoquista.java:23)"+", when \n"+"\t\'dataNascimento\' is "+dataNascimento;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Estoquista.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Estoquista.setDataNascimento(java.lang.String dataNascimento)");

     }

  /** Generated by JML to check the precondition of
   * method setCargo. */
  before (final models.funcionario.Estoquista object$rac, final java.lang.String cargo) :
     execution(void models.funcionario.Estoquista.setCargo(java.lang.String)) && 
     this(object$rac) && args(cargo) {
       boolean rac$b = (cargo != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.funcionario.Estoquista.setCargo regarding code at \nFile \"models.funcionario.Estoquista.java\", line 28 (models.funcionario.Estoquista.java:28)"+", when \n"+"\t\'cargo\' is "+cargo;
       String evalErrorMsg = "Invalid expression in \"models.funcionario.Estoquista.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.funcionario.Estoquista.setCargo(java.lang.String cargo)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Estoquista{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Estoquista;
    before(): (execution(void models.funcionario.Estoquista.setNome(java.lang.String))
            || execution(void models.funcionario.Estoquista.setRg(java.lang.String))
            || execution(void models.funcionario.Estoquista.setCpf(java.lang.String))
            || execution(void models.funcionario.Estoquista.setDataNascimento(java.lang.String))
            || execution(void models.funcionario.Estoquista.setCargo(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Estoquista{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Estoquista, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.funcionario.Estoquista+.*(..))
            || execution(models.funcionario.Estoquista+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
