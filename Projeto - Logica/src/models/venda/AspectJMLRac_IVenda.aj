package models.venda;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IVenda {










  /** Generated by JML to check the exceptional postcondition of
   * method getVendedorRG. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.IVenda.getVendedorRG()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getVendedorRG()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.venda.IVenda.getVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getVendedorRG()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataVenda. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.IVenda.getDataVenda()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getDataVenda()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.venda.IVenda.getDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getDataVenda()");
  	 }


  /** Generated by JML to check the precondition of
   * method setVendedorRG. */
  before (final models.venda.IVenda object$rac, final java.lang.String vendedorRG) :
     execution(void models.venda.IVenda.setVendedorRG(java.lang.String)) && 
     this(object$rac) && args(vendedorRG) {
       boolean rac$b = (vendedorRG != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.venda.IVenda.setVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'vendedorRG\' is "+vendedorRG;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setVendedorRG(java.lang.String vendedorRG)");

     }

  /** Generated by JML to check the precondition of
   * method setDataVenda. */
  before (final models.venda.IVenda object$rac, final java.lang.String dataVenda) :
     execution(void models.venda.IVenda.setDataVenda(java.lang.String)) && 
     this(object$rac) && args(dataVenda) {
       boolean rac$b = (dataVenda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.venda.IVenda.setDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'dataVenda\' is "+dataVenda;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setDataVenda(java.lang.String dataVenda)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IVenda{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IVenda;
    before(): (execution(void models.venda.IVenda.setVendedorRG(java.lang.String))
            || execution(void models.venda.IVenda.setDataVenda(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IVenda{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IVenda, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.venda.IVenda+.*(..))
            || execution(models.venda.IVenda+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
