package models.venda;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IVenda {










  /** Generated by JML to implement the instance model field isubtotal. */
  private double models.venda.IVenda.isubtotal;

  /** Generated by JML to implement the instance model field ivendedorRG. */
  private java.lang.String models.venda.IVenda.ivendedorRG;

  /** Generated by JML to implement the instance model field iqtdVendas. */
  private int models.venda.IVenda.iqtdVendas;

  /** Generated by JML to implement the instance model field idataVenda. */
  private java.lang.String models.venda.IVenda.idataVenda;

  /** Generated by JML to implement the instance model field iID. */
  private int models.venda.IVenda.iID;

  /** Generated by JML to check the normal postcondition of
   * method getID. */
  after (final models.venda.IVenda object$rac) returning (int rac$result) :
     execution(int models.venda.IVenda.getID()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.iID));
       String nPostErrorMsg =  "by method models.venda.IVenda.getID regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 11, character 31 (models.venda.IVenda.java:11), when \n\t\'this.iID\' is "+object$rac.iID;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getID regarding specifications at \n[spec-case]: line 11, character 31 (models.venda.IVenda.java:11)"+", when \n\t\'this.iID\' is "+object$rac.iID+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getID()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getID. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(int models.venda.IVenda.getID()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getID()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getID\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.getID regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getID()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getSubtotal. */
  after (final models.venda.IVenda object$rac) returning (double rac$result) :
     execution(double models.venda.IVenda.getSubtotal()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.isubtotal));
       String nPostErrorMsg =  "by method models.venda.IVenda.getSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 15, character 31 (models.venda.IVenda.java:15), when \n\t\'this.isubtotal\' is "+object$rac.isubtotal;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getSubtotal regarding specifications at \n[spec-case]: line 15, character 31 (models.venda.IVenda.java:15)"+", when \n\t\'this.isubtotal\' is "+object$rac.isubtotal+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getSubtotal()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getSubtotal. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(double models.venda.IVenda.getSubtotal()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getSubtotal()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getSubtotal\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.getSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getSubtotal()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getVendedorRG. */
  after (final models.venda.IVenda object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.venda.IVenda.getVendedorRG()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.ivendedorRG)));
       String nPostErrorMsg =  "by method models.venda.IVenda.getVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 19, character 31 (models.venda.IVenda.java:19), when \n\t\'this.ivendedorRG\' is "+object$rac.ivendedorRG;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getVendedorRG regarding specifications at \n[spec-case]: line 19, character 31 (models.venda.IVenda.java:19)"+", when \n\t\'this.ivendedorRG\' is "+object$rac.ivendedorRG+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getVendedorRG()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getVendedorRG. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.IVenda.getVendedorRG()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getVendedorRG()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getVendedorRG\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.getVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getVendedorRG()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getDataVenda. */
  after (final models.venda.IVenda object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.venda.IVenda.getDataVenda()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.idataVenda)));
       String nPostErrorMsg =  "by method models.venda.IVenda.getDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 23, character 31 (models.venda.IVenda.java:23), when \n\t\'this.idataVenda\' is "+object$rac.idataVenda;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getDataVenda regarding specifications at \n[spec-case]: line 23, character 31 (models.venda.IVenda.java:23)"+", when \n\t\'this.idataVenda\' is "+object$rac.idataVenda+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getDataVenda()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataVenda. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.IVenda.getDataVenda()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getDataVenda()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getDataVenda\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.getDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getDataVenda()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getQtdVendas. */
  after (final models.venda.IVenda object$rac) returning (int rac$result) :
     execution(int models.venda.IVenda.getQtdVendas()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.iqtdVendas));
       String nPostErrorMsg =  "by method models.venda.IVenda.getQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 27, character 31 (models.venda.IVenda.java:27), when \n\t\'this.iqtdVendas\' is "+object$rac.iqtdVendas;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getQtdVendas regarding specifications at \n[spec-case]: line 27, character 31 (models.venda.IVenda.java:27)"+", when \n\t\'this.iqtdVendas\' is "+object$rac.iqtdVendas+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getQtdVendas()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getQtdVendas. */
  after (final models.venda.IVenda object$rac) throwing (Throwable rac$e) :
     execution(int models.venda.IVenda.getQtdVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.getQtdVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getQtdVendas\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.getQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.getQtdVendas()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setID. */
  after (final models.venda.IVenda object$rac, final int iD) returning () :
     execution(void models.venda.IVenda.setID(int)) && this(object$rac) && args(iD) {
       boolean rac$b = (!(iD >= 0) || (object$rac.iID == iD));
       String nPostErrorMsg =  "by method models.venda.IVenda.setID regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 33, character 27 (models.venda.IVenda.java:33), when \n\t\'this.iID\' is "+object$rac.iID+"\n\t\'iD\' is "+iD;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setID regarding specifications at \n[spec-case]: line 33, character 27 (models.venda.IVenda.java:33)"+", when \n\t\'this.iID\' is "+object$rac.iID+"\n\t\'iD\' is "+iD+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setID(int iD)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setID. */
  after (final models.venda.IVenda object$rac, final int iD) throwing (Throwable rac$e) :
     execution(void models.venda.IVenda.setID(int)) && this(object$rac) && args(iD) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.setID(int iD)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (iD >= 0)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setID\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.setID regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.setID(int iD)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setSubtotal. */
  after (final models.venda.IVenda object$rac, final double subtotal) returning () :
     execution(void models.venda.IVenda.setSubtotal(double)) && this(object$rac) && args(subtotal) {
       boolean rac$b = (!(subtotal >= +0.0D) || (object$rac.isubtotal == subtotal));
       String nPostErrorMsg =  "by method models.venda.IVenda.setSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 39, character 33 (models.venda.IVenda.java:39), when \n\t\'this.isubtotal\' is "+object$rac.isubtotal+"\n\t\'subtotal\' is "+subtotal;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setSubtotal regarding specifications at \n[spec-case]: line 39, character 33 (models.venda.IVenda.java:39)"+", when \n\t\'this.isubtotal\' is "+object$rac.isubtotal+"\n\t\'subtotal\' is "+subtotal+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setSubtotal(double subtotal)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setSubtotal. */
  after (final models.venda.IVenda object$rac, final double subtotal) throwing (Throwable rac$e) :
     execution(void models.venda.IVenda.setSubtotal(double)) && this(object$rac) && args(subtotal) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.setSubtotal(double subtotal)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (subtotal >= +0.0D)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setSubtotal\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.setSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.setSubtotal(double subtotal)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setVendedorRG. */
  after (final models.venda.IVenda object$rac, final java.lang.String vendedorRG) returning () :
     execution(void models.venda.IVenda.setVendedorRG(java.lang.String)) && this(object$rac) && args(vendedorRG) {
       boolean rac$b = (!((vendedorRG != null) && (vendedorRG != null)) || (object$rac.ivendedorRG == vendedorRG));
       String nPostErrorMsg =  "by method models.venda.IVenda.setVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 45, character 35 (models.venda.IVenda.java:45), when \n\t\'this.ivendedorRG\' is "+object$rac.ivendedorRG+"\n\t\'vendedorRG\' is "+vendedorRG;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setVendedorRG regarding specifications at \n[spec-case]: line 45, character 35 (models.venda.IVenda.java:45)"+", when \n\t\'this.ivendedorRG\' is "+object$rac.ivendedorRG+"\n\t\'vendedorRG\' is "+vendedorRG+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setVendedorRG(java.lang.String vendedorRG)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setVendedorRG. */
  after (final models.venda.IVenda object$rac, final java.lang.String vendedorRG) throwing (Throwable rac$e) :
     execution(void models.venda.IVenda.setVendedorRG(java.lang.String)) && this(object$rac) && args(vendedorRG) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.setVendedorRG(java.lang.String vendedorRG)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((vendedorRG != null) && (vendedorRG != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setVendedorRG\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.setVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.setVendedorRG(java.lang.String vendedorRG)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setDataVenda. */
  after (final models.venda.IVenda object$rac, final java.lang.String dataVenda) returning () :
     execution(void models.venda.IVenda.setDataVenda(java.lang.String)) && this(object$rac) && args(dataVenda) {
       boolean rac$b = (!((dataVenda != null) && (dataVenda != null)) || (object$rac.idataVenda == dataVenda));
       String nPostErrorMsg =  "by method models.venda.IVenda.setDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 51, character 34 (models.venda.IVenda.java:51), when \n\t\'this.idataVenda\' is "+object$rac.idataVenda+"\n\t\'dataVenda\' is "+dataVenda;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setDataVenda regarding specifications at \n[spec-case]: line 51, character 34 (models.venda.IVenda.java:51)"+", when \n\t\'this.idataVenda\' is "+object$rac.idataVenda+"\n\t\'dataVenda\' is "+dataVenda+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setDataVenda(java.lang.String dataVenda)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setDataVenda. */
  after (final models.venda.IVenda object$rac, final java.lang.String dataVenda) throwing (Throwable rac$e) :
     execution(void models.venda.IVenda.setDataVenda(java.lang.String)) && this(object$rac) && args(dataVenda) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.setDataVenda(java.lang.String dataVenda)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((dataVenda != null) && (dataVenda != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setDataVenda\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.setDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.setDataVenda(java.lang.String dataVenda)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setQtdVendas. */
  after (final models.venda.IVenda object$rac, final int qtdVendas) returning () :
     execution(void models.venda.IVenda.setQtdVendas(int)) && this(object$rac) && args(qtdVendas) {
       boolean rac$b = (!(qtdVendas >= 0) || (object$rac.iqtdVendas == qtdVendas));
       String nPostErrorMsg =  "by method models.venda.IVenda.setQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\", [spec-case]: line 57, character 34 (models.venda.IVenda.java:57), when \n\t\'this.iqtdVendas\' is "+object$rac.iqtdVendas+"\n\t\'qtdVendas\' is "+qtdVendas;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setQtdVendas regarding specifications at \n[spec-case]: line 57, character 34 (models.venda.IVenda.java:57)"+", when \n\t\'this.iqtdVendas\' is "+object$rac.iqtdVendas+"\n\t\'qtdVendas\' is "+qtdVendas+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setQtdVendas(int qtdVendas)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setQtdVendas. */
  after (final models.venda.IVenda object$rac, final int qtdVendas) throwing (Throwable rac$e) :
     execution(void models.venda.IVenda.setQtdVendas(int)) && this(object$rac) && args(qtdVendas) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.IVenda.setQtdVendas(int qtdVendas)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (qtdVendas >= 0)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setQtdVendas\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.venda.IVenda.setQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.IVenda.setQtdVendas(int qtdVendas)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * interface IVenda. */
  before (final models.venda.IVenda object$rac) :
     execution(!static * models.venda.IVenda+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = ((object$rac.ivendedorRG != null) && (object$rac.idataVenda != null));
       String invErrorMsg = "@pre <File \"IVenda.java\"> regarding code at \nFile \"IVenda.java\"\nnon_null for field 'ivendedorRG' <File \"models.venda.IVenda.java\", line 6, character 54 (models.venda.IVenda.java:6)>\nnon_null for field 'idataVenda' <File \"models.venda.IVenda.java\", line 7, character 53 (models.venda.IVenda.java:7)>\n";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"IVenda.java\"> regarding code at \nFile \"IVenda.java\"\nnon_null for field 'ivendedorRG' <File \"models.venda.IVenda.java\", line 6, character 54 (models.venda.IVenda.java:6)>\nnon_null for field 'idataVenda' <File \"models.venda.IVenda.java\", line 7, character 53 (models.venda.IVenda.java:7)>\n\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method getID. */
  before (final models.venda.IVenda object$rac) :
     execution(int models.venda.IVenda.getID()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 11, character 20 (models.venda.IVenda.java:11), and \nby method models.venda.IVenda.getID regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.getID regarding specifications at \nFile \"models.venda.IVenda.java\"";
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getID regarding specifications at \n[spec-case]: line 11, character 20 (models.venda.IVenda.java:11)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getID()");

     }

  /** Generated by JML to check the precondition of
   * method getSubtotal. */
  before (final models.venda.IVenda object$rac) :
     execution(double models.venda.IVenda.getSubtotal()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 15, character 20 (models.venda.IVenda.java:15), and \nby method models.venda.IVenda.getSubtotal regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.getSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\"";
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getSubtotal regarding specifications at \n[spec-case]: line 15, character 20 (models.venda.IVenda.java:15)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getSubtotal()");

     }

  /** Generated by JML to check the precondition of
   * method getVendedorRG. */
  before (final models.venda.IVenda object$rac) :
     execution(java.lang.String models.venda.IVenda.getVendedorRG()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 19, character 20 (models.venda.IVenda.java:19), and \nby method models.venda.IVenda.getVendedorRG regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.getVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\"";
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getVendedorRG regarding specifications at \n[spec-case]: line 19, character 20 (models.venda.IVenda.java:19)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getVendedorRG()");

     }

  /** Generated by JML to check the precondition of
   * method getDataVenda. */
  before (final models.venda.IVenda object$rac) :
     execution(java.lang.String models.venda.IVenda.getDataVenda()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 23, character 20 (models.venda.IVenda.java:23), and \nby method models.venda.IVenda.getDataVenda regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.getDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\"";
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getDataVenda regarding specifications at \n[spec-case]: line 23, character 20 (models.venda.IVenda.java:23)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getDataVenda()");

     }

  /** Generated by JML to check the precondition of
   * method getQtdVendas. */
  before (final models.venda.IVenda object$rac) :
     execution(int models.venda.IVenda.getQtdVendas()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 27, character 20 (models.venda.IVenda.java:27), and \nby method models.venda.IVenda.getQtdVendas regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.getQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\"";
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.getQtdVendas regarding specifications at \n[spec-case]: line 27, character 20 (models.venda.IVenda.java:27)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.getQtdVendas()");

     }

  /** Generated by JML to check the precondition of
   * method setID. */
  before (final models.venda.IVenda object$rac, final int iD) :
     execution(void models.venda.IVenda.setID(int)) && 
     this(object$rac) && args(iD) {
       boolean rac$b = (iD >= 0);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 31, character 27 (models.venda.IVenda.java:31), and \nby method models.venda.IVenda.setID regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.setID regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'iD\' is "+iD;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setID regarding specifications at \n[spec-case]: line 31, character 27 (models.venda.IVenda.java:31)"+", when \n"+"\t\'iD\' is "+iD+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setID(int iD)");

     }

  /** Generated by JML to check the precondition of
   * method setSubtotal. */
  before (final models.venda.IVenda object$rac, final double subtotal) :
     execution(void models.venda.IVenda.setSubtotal(double)) && 
     this(object$rac) && args(subtotal) {
       boolean rac$b = (subtotal >= +0.0D);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 37, character 33 (models.venda.IVenda.java:37), and \nby method models.venda.IVenda.setSubtotal regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.setSubtotal regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'subtotal\' is "+subtotal;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setSubtotal regarding specifications at \n[spec-case]: line 37, character 33 (models.venda.IVenda.java:37)"+", when \n"+"\t\'subtotal\' is "+subtotal+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setSubtotal(double subtotal)");

     }

  /** Generated by JML to check the precondition of
   * method setVendedorRG. */
  before (final models.venda.IVenda object$rac, final java.lang.String vendedorRG) :
     execution(void models.venda.IVenda.setVendedorRG(java.lang.String)) && 
     this(object$rac) && args(vendedorRG) {
       boolean rac$b = ((vendedorRG != null) && (vendedorRG != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 43, character 35 (models.venda.IVenda.java:43), and \nby method models.venda.IVenda.setVendedorRG regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.setVendedorRG regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'vendedorRG\' is "+vendedorRG;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setVendedorRG regarding specifications at \n[spec-case]: line 43, character 35 (models.venda.IVenda.java:43)"+", when \n"+"\t\'vendedorRG\' is "+vendedorRG+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setVendedorRG(java.lang.String vendedorRG)");

     }

  /** Generated by JML to check the precondition of
   * method setDataVenda. */
  before (final models.venda.IVenda object$rac, final java.lang.String dataVenda) :
     execution(void models.venda.IVenda.setDataVenda(java.lang.String)) && 
     this(object$rac) && args(dataVenda) {
       boolean rac$b = ((dataVenda != null) && (dataVenda != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 49, character 34 (models.venda.IVenda.java:49), and \nby method models.venda.IVenda.setDataVenda regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.setDataVenda regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'dataVenda\' is "+dataVenda;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setDataVenda regarding specifications at \n[spec-case]: line 49, character 34 (models.venda.IVenda.java:49)"+", when \n"+"\t\'dataVenda\' is "+dataVenda+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setDataVenda(java.lang.String dataVenda)");

     }

  /** Generated by JML to check the precondition of
   * method setQtdVendas. */
  before (final models.venda.IVenda object$rac, final int qtdVendas) :
     execution(void models.venda.IVenda.setQtdVendas(int)) && 
     this(object$rac) && args(qtdVendas) {
       boolean rac$b = (qtdVendas >= 0);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 55, character 34 (models.venda.IVenda.java:55), and \nby method models.venda.IVenda.setQtdVendas regarding code at \nFile \"models.venda.IVenda.java\"by method models.venda.IVenda.setQtdVendas regarding specifications at \nFile \"models.venda.IVenda.java\", when \n\t\'qtdVendas\' is "+qtdVendas;
       String evalErrorMsg = "Invalid expression in \"models.venda.IVenda.java\" by method models.venda.IVenda.setQtdVendas regarding specifications at \n[spec-case]: line 55, character 34 (models.venda.IVenda.java:55)"+", when \n"+"\t\'qtdVendas\' is "+qtdVendas+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.IVenda.setQtdVendas(int qtdVendas)");

     }


  /** Generated by JML to check non-static invariants of 
   * interface IVenda. */
  after (final models.venda.IVenda object$rac) :
     (execution(!static * models.venda.IVenda+.*(..)) || 
       execution(models.venda.IVenda+.new(..))) && 
     !execution(void models.venda.IVenda.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = ((object$rac.ivendedorRG != null) && (object$rac.idataVenda != null));
         String invErrorMsg = "@post <File \"IVenda.java\"> regarding code at \nFile \"IVenda.java\"\nnon_null for field 'ivendedorRG' <File \"models.venda.IVenda.java\", line 6, character 54 (models.venda.IVenda.java:6)>\nnon_null for field 'idataVenda' <File \"models.venda.IVenda.java\", line 7, character 53 (models.venda.IVenda.java:7)>\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"IVenda.java\"> regarding code at \nFile \"IVenda.java\"\nnon_null for field 'ivendedorRG' <File \"models.venda.IVenda.java\", line 6, character 54 (models.venda.IVenda.java:6)>\nnon_null for field 'idataVenda' <File \"models.venda.IVenda.java\", line 7, character 53 (models.venda.IVenda.java:7)>\n\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IVenda{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IVenda;
    before(): (execution(int models.venda.IVenda.getID())
            || execution(double models.venda.IVenda.getSubtotal())
            || execution(java.lang.String models.venda.IVenda.getVendedorRG())
            || execution(java.lang.String models.venda.IVenda.getDataVenda())
            || execution(int models.venda.IVenda.getQtdVendas())
            || execution(void models.venda.IVenda.setID(int))
            || execution(void models.venda.IVenda.setSubtotal(double))
            || execution(void models.venda.IVenda.setVendedorRG(java.lang.String))
            || execution(void models.venda.IVenda.setDataVenda(java.lang.String))
            || execution(void models.venda.IVenda.setQtdVendas(int))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IVenda{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IVenda, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.venda.IVenda+.*(..))
            || execution(models.venda.IVenda+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
