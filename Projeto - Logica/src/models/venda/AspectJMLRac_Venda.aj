package models.venda;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Venda {










  /** Generated by JML to access the model field iID. */
  before (models.venda.IVenda object$rac): get(int models.venda.IVenda.iID) && target (object$rac)
  && if (object$rac instanceof models.venda.Venda){
    object$rac.iID = ((models.venda.Venda)object$rac).ID;
  }

  /** Generated by JML to access the model field isubtotal. */
  before (models.venda.IVenda object$rac): get(double models.venda.IVenda.isubtotal) && target (object$rac)
  && if (object$rac instanceof models.venda.Venda){
    object$rac.isubtotal = ((models.venda.Venda)object$rac).subtotal;
  }

  /** Generated by JML to access the model field ivendedorRG. */
  before (models.venda.IVenda object$rac): get(java.lang.String models.venda.IVenda.ivendedorRG) && target (object$rac)
  && if (object$rac instanceof models.venda.Venda){
    object$rac.ivendedorRG = ((java.lang.String) (((models.venda.Venda)object$rac).vendedorRG));
  }

  /** Generated by JML to access the model field idataVenda. */
  before (models.venda.IVenda object$rac): get(java.lang.String models.venda.IVenda.idataVenda) && target (object$rac)
  && if (object$rac instanceof models.venda.Venda){
    object$rac.idataVenda = ((java.lang.String) (((models.venda.Venda)object$rac).dataVenda));
  }

  /** Generated by JML to access the model field iqtdVendas. */
  before (models.venda.IVenda object$rac): get(int models.venda.IVenda.iqtdVendas) && target (object$rac)
  && if (object$rac instanceof models.venda.Venda){
    object$rac.iqtdVendas = ((models.venda.Venda)object$rac).qtdVendas;
  }

  /** Generated by JML to check the exceptional postcondition of
   * method getVendedorRG. */
  after (final models.venda.Venda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.Venda.getVendedorRG()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.Venda.getVendedorRG()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.venda.Venda.getVendedorRG regarding code at \nFile \"models.venda.Venda.java\", line 37 (models.venda.Venda.java:37)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.Venda.getVendedorRG()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method getDataVenda. */
  after (final models.venda.Venda object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.venda.Venda.getDataVenda()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.venda.Venda.getDataVenda()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method models.venda.Venda.getDataVenda regarding code at \nFile \"models.venda.Venda.java\", line 42 (models.venda.Venda.java:42)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.venda.Venda.getDataVenda()");
  	 }

  /** Generated by JML to check non-static invariants of 
   * class Venda. */
  before (final models.venda.Venda object$rac) :
     execution(!static * models.venda.Venda+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = ((object$rac.vendedorRG != null) && (object$rac.dataVenda != null));
       String invErrorMsg = "@pre <File \"Venda.java\"> regarding code at \nFile \"Venda.java\"\nnon_null for field 'vendedorRG' <File \"models.venda.Venda.java\", line 13, character 55 (models.venda.Venda.java:13)>\nnon_null for field 'dataVenda' <File \"models.venda.Venda.java\", line 17, character 54 (models.venda.Venda.java:17)>\n";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"Venda.java\"> regarding code at \nFile \"Venda.java\"\nnon_null for field 'vendedorRG' <File \"models.venda.Venda.java\", line 13, character 55 (models.venda.Venda.java:13)>\nnon_null for field 'dataVenda' <File \"models.venda.Venda.java\", line 17, character 54 (models.venda.Venda.java:17)>\n\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method setVendedorRG. */
  before (final models.venda.Venda object$rac, final java.lang.String vendedorRG) :
     execution(void models.venda.Venda.setVendedorRG(java.lang.String)) && 
     this(object$rac) && args(vendedorRG) {
       boolean rac$b = (vendedorRG != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.venda.Venda.setVendedorRG regarding code at \nFile \"models.venda.Venda.java\", line 61 (models.venda.Venda.java:61)"+", when \n"+"\t\'vendedorRG\' is "+vendedorRG;
       String evalErrorMsg = "Invalid expression in \"models.venda.Venda.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.Venda.setVendedorRG(java.lang.String vendedorRG)");

     }

  /** Generated by JML to check the precondition of
   * method setDataVenda. */
  before (final models.venda.Venda object$rac, final java.lang.String dataVenda) :
     execution(void models.venda.Venda.setDataVenda(java.lang.String)) && 
     this(object$rac) && args(dataVenda) {
       boolean rac$b = (dataVenda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method models.venda.Venda.setDataVenda regarding code at \nFile \"models.venda.Venda.java\", line 66 (models.venda.Venda.java:66)"+", when \n"+"\t\'dataVenda\' is "+dataVenda;
       String evalErrorMsg = "Invalid expression in \"models.venda.Venda.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.venda.Venda.setDataVenda(java.lang.String dataVenda)");

     }


  /** Generated by JML to check non-static invariants of 
   * class Venda. */
  after (final models.venda.Venda object$rac) :
     (execution(!static * models.venda.Venda+.*(..)) || 
       execution(models.venda.Venda+.new(..))) && 
     !execution(void models.venda.Venda.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = ((object$rac.vendedorRG != null) && (object$rac.dataVenda != null));
         String invErrorMsg = "@post <File \"Venda.java\"> regarding code at \nFile \"Venda.java\"\nnon_null for field 'vendedorRG' <File \"models.venda.Venda.java\", line 13, character 55 (models.venda.Venda.java:13)>\nnon_null for field 'dataVenda' <File \"models.venda.Venda.java\", line 17, character 54 (models.venda.Venda.java:17)>\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Venda.java\"> regarding code at \nFile \"Venda.java\"\nnon_null for field 'vendedorRG' <File \"models.venda.Venda.java\", line 13, character 55 (models.venda.Venda.java:13)>\nnon_null for field 'dataVenda' <File \"models.venda.Venda.java\", line 17, character 54 (models.venda.Venda.java:17)>\n\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Venda{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Venda;
    before(): (execution(void models.venda.Venda.setVendedorRG(java.lang.String))
            || execution(void models.venda.Venda.setDataVenda(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Venda{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Venda, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.venda.Venda+.*(..))
            || execution(models.venda.Venda+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
