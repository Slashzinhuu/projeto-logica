package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOFuncionario {









  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionario. */
  after (final dao.DAOFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.DAOFuncionario.listarFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.listarFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFuncionario.listarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 121 (dao.DAOFuncionario.java:121)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.listarFuncionario()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final dao.DAOFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFuncionario.buscarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 149 (dao.DAOFuncionario.java:149)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");
  	 }


  /** Generated by JML to check the precondition of
   * method criarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.criarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 33 (dao.DAOFuncionario.java:33)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method atualizarSalario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.atualizarSalario regarding code at \nFile \"dao.DAOFuncionario.java\", line 54 (dao.DAOFuncionario.java:54)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method editarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.editarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 68 (dao.DAOFuncionario.java:68)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(void dao.DAOFuncionario.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.apagarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 86 (dao.DAOFuncionario.java:86)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.buscarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 126 (dao.DAOFuncionario.java:126)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method quantidadeVendas. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.quantidadeVendas regarding code at \nFile \"dao.DAOFuncionario.java\", line 155 (dao.DAOFuncionario.java:155)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method buscarSalario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.buscarSalario regarding code at \nFile \"dao.DAOFuncionario.java\", line 178 (dao.DAOFuncionario.java:178)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_DAOFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_DAOFuncionario;
    before(): (execution(void dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.apagarFuncionario(java.lang.String))
            || execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String))
            || execution(int dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario))
            || execution(double dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOFuncionario+.*(..))
            || execution(dao.DAOFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
