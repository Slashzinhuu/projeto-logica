package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_ConnectMySql {

  /** Generated by JML to check the exceptional postcondition of
   * method conexao. */
   after (final java.lang.String url, final java.lang.String nome, final java.lang.String senha, final int banco) throwing (Throwable rac$e) :
     execution(static java.sql.Connection dao.ConnectMySql.conexao(java.lang.String, java.lang.String, java.lang.String, int)) && args(url, nome, senha, banco) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.ConnectMySql.conexao(java.lang.String url, java.lang.String nome, java.lang.String senha, int banco)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.ConnectMySql.conexao regarding code at \nFile \"dao.ConnectMySql.java\", line 20 (dao.ConnectMySql.java:20)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.ConnectMySql.conexao(java.lang.String url, java.lang.String nome, java.lang.String senha, int banco)");
  	 }

  /** Generated by JML to check static invariants of 
   * class ConnectMySql. */
  before () :
     (execution( * dao.ConnectMySql+.*(..)) || 
       execution(dao.ConnectMySql+.new(..))) && 
     !@annotation(JMLHelper) {
       boolean rac$b = (dao.ConnectMySql.MySQLDriver != null);
       String invErrorMsg = "@pre <File \"ConnectMySql.java\"> regarding code at \nFile \"ConnectMySql.java\"\nnon_null for field 'MySQLDriver' <File \"dao.ConnectMySql.java\", line 10, character 50 (dao.ConnectMySql.java:10)>";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"ConnectMySql.java\"> regarding code at \nFile \"ConnectMySql.java\"\nnon_null for field 'MySQLDriver' <File \"dao.ConnectMySql.java\", line 10, character 50 (dao.ConnectMySql.java:10)>\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method conexao. */
  before (final java.lang.String url, final java.lang.String nome, final java.lang.String senha, final int banco) :
     execution(static java.sql.Connection dao.ConnectMySql.conexao(java.lang.String, java.lang.String, java.lang.String, int)) && args(url, nome, senha, banco) {
       boolean rac$b = (((url != null) && (nome != null)) && (senha != null));
       boolean canThrow = true;
       String preErrorMsg = "by method dao.ConnectMySql.conexao regarding code at \nFile \"dao.ConnectMySql.java\", line 15 (dao.ConnectMySql.java:15)"+", when \n"+"\t\'url\' is "+url+"\n\t\'nome\' is "+nome+"\n\t\'senha\' is "+senha;
       String evalErrorMsg = "Invalid expression in \"dao.ConnectMySql.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.ConnectMySql.conexao(java.lang.String url, java.lang.String nome, java.lang.String senha, int banco)");

     }


  /** Generated by JML to check static invariants of 
   * class ConnectMySql. */
  after () :
     (execution( * dao.ConnectMySql+.*(..)) || 
       execution(dao.ConnectMySql+.new(..)) || 
       staticinitialization(dao.ConnectMySql+)) && 
     !@annotation(JMLHelper) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = (dao.ConnectMySql.MySQLDriver != null);
         String invErrorMsg = "@post <File \"ConnectMySql.java\"> regarding code at \nFile \"ConnectMySql.java\"\nnon_null for field 'MySQLDriver' <File \"dao.ConnectMySql.java\", line 10, character 50 (dao.ConnectMySql.java:10)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"ConnectMySql.java\"> regarding code at \nFile \"ConnectMySql.java\"\nnon_null for field 'MySQLDriver' <File \"dao.ConnectMySql.java\", line 10, character 50 (dao.ConnectMySql.java:10)>\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }



  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_ConnectMySql{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_ConnectMySql, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.ConnectMySql+.*(..))
            || execution(dao.ConnectMySql+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
