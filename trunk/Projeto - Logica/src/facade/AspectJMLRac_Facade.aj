package facade;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Facade {























  /** Generated by JML to check the normal postcondition of
   * method Facade. */
  after (final facade.Facade object$rac, final int whichFactory) returning () :
     execution(facade.Facade.new( int )) && this(object$rac) && args(whichFactory) {
       boolean rac$b = (!(whichFactory == 0) || ((((object$rac.DaoFactory != null) && (object$rac.iDaoMercadoria != null)) && (object$rac.iDaoFuncionario != null)) && (object$rac.iDaoVendas != null)));
       String nPostErrorMsg =  "by method facade.Facade.<init> regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 20, character 34 (facade.Facade.java:20), line 21, character 38 (facade.Facade.java:21), line 22, character 39 (facade.Facade.java:22), line 23, character 34 (facade.Facade.java:23), and \nby method facade.Facade.<init> regarding code at \nFile \"facade.Facade.java\", line 29 (facade.Facade.java:29)"+", when \n"+"\t\'this.DaoFactory\' is "+object$rac.DaoFactory+"\n\t\'this.iDaoMercadoria\' is "+object$rac.iDaoMercadoria+"\n\t\'this.iDaoFuncionario\' is "+object$rac.iDaoFuncionario+"\n\t\'this.iDaoVendas\' is "+object$rac.iDaoVendas;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.<init> regarding specifications at \n[spec-case]: line 20, character 34 (facade.Facade.java:20), line 21, character 38 (facade.Facade.java:21), line 22, character 39 (facade.Facade.java:22), line 23, character 34 (facade.Facade.java:23)"+", when \n"+"\t\'this.DaoFactory\' is "+object$rac.DaoFactory+"\n\t\'this.iDaoMercadoria\' is "+object$rac.iDaoMercadoria+"\n\t\'this.iDaoFuncionario\' is "+object$rac.iDaoFuncionario+"\n\t\'this.iDaoVendas\' is "+object$rac.iDaoVendas+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.<init>(int whichFactory)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method Facade. */
  after (final facade.Facade object$rac, final int whichFactory) throwing (Throwable rac$e) :
     execution(facade.Facade.new( int )) && this(object$rac) && args(whichFactory) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.<init>(int whichFactory)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (whichFactory == 0)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.<init>\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.<init> regarding code at \nFile \"facade.Facade.java\", line 29 (facade.Facade.java:29)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.<init>(int whichFactory)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarRg. */
  after (final facade.Facade object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(java.lang.String facade.Facade.buscarRg(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarRg(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarRg regarding code at \nFile \"facade.Facade.java\", line 93 (facade.Facade.java:93)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarRg(java.lang.String rg)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method buscarIdVendas. */
  after (final facade.Facade object$rac, final int id) returning (int rac$result) :
     execution(int facade.Facade.buscarIdVendas(int)) && this(object$rac) && args(id) {
       boolean rac$b = (!(id > 0) || ((rac$result > 0) || (rac$result == -1)));
       String nPostErrorMsg =  "by method facade.Facade.buscarIdVendas regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 98, character 30 (facade.Facade.java:98), and \nby method facade.Facade.buscarIdVendas regarding code at \nFile \"facade.Facade.java\", line 101 (facade.Facade.java:101)";
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.buscarIdVendas regarding specifications at \n[spec-case]: line 98, character 30 (facade.Facade.java:98)\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarIdVendas(int id)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarIdVendas. */
  after (final facade.Facade object$rac, final int id) throwing (Throwable rac$e) :
     execution(int facade.Facade.buscarIdVendas(int)) && this(object$rac) && args(id) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarIdVendas(int id)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (id > 0)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.buscarIdVendas\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.buscarIdVendas regarding code at \nFile \"facade.Facade.java\", line 101 (facade.Facade.java:101)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarIdVendas(int id)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method apagarFuncionario. */
  after (final facade.Facade object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(void facade.Facade.apagarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.apagarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((rg != null) && (rg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.apagarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 106 (facade.Facade.java:106)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.apagarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionarios. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarFuncionarios()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarFuncionarios()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarFuncionarios regarding code at \nFile \"facade.Facade.java\", line 116 (facade.Facade.java:116)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarFuncionarios()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final facade.Facade object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarFuncionario regarding code at \nFile \"facade.Facade.java\", line 120 (facade.Facade.java:120)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarMercadorias. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarMercadorias()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarMercadorias()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarMercadorias regarding code at \nFile \"facade.Facade.java\", line 142 (facade.Facade.java:142)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarMercadorias()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarMercadoria. */
  after (final facade.Facade object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.mercadoria.IMercadoria facade.Facade.buscarMercadoria(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarMercadoria(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarMercadoria regarding code at \nFile \"facade.Facade.java\", line 146 (facade.Facade.java:146)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarMercadoria(int ID)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarVendas. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarVendas regarding code at \nFile \"facade.Facade.java\", line 167 (facade.Facade.java:167)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarVendas()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarVenda. */
  after (final facade.Facade object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.venda.IVenda facade.Facade.buscarVenda(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarVenda(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarVenda regarding code at \nFile \"facade.Facade.java\", line 171 (facade.Facade.java:171)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarVenda(int ID)");
  	 }


  /** Generated by JML to check the precondition of
   * method Facade. */
  before (final facade.Facade object$rac, final int whichFactory) :
     execution(facade.Facade.new( int )) && 
     this(object$rac) && args(whichFactory) {
       boolean rac$b = (whichFactory == 0);
       boolean canThrow = true;
       String preErrorMsg = "by method facade.Facade.<init> regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 19, character 37 (facade.Facade.java:19), and \nby method facade.Facade.<init> regarding code at \nFile \"facade.Facade.java\", line 26 (facade.Facade.java:26)"+", when \n"+"\t\'whichFactory\' is "+whichFactory;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.<init> regarding specifications at \n[spec-case]: line 19, character 37 (facade.Facade.java:19)"+", when \n"+"\t\'whichFactory\' is "+whichFactory+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.<init>(int whichFactory)");

     }

  /** Generated by JML to check the precondition of
   * method buscarRg. */
  before (final facade.Facade object$rac, final java.lang.String rg) :
     execution(java.lang.String facade.Facade.buscarRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.buscarRg regarding code at \nFile \"facade.Facade.java\", line 93 (facade.Facade.java:93)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarIdVendas. */
  before (final facade.Facade object$rac, final int id) :
     execution(int facade.Facade.buscarIdVendas(int)) && 
     this(object$rac) && args(id) {
       boolean rac$b = (id > 0);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.buscarIdVendas regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 97, character 26 (facade.Facade.java:97), and \nby method facade.Facade.buscarIdVendas regarding code at \nFile \"facade.Facade.java\", line 101 (facade.Facade.java:101)"+", when \n"+"\t\'id\' is "+id;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.buscarIdVendas regarding specifications at \n[spec-case]: line 97, character 26 (facade.Facade.java:97)"+", when \n"+"\t\'id\' is "+id+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarIdVendas(int id)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final facade.Facade object$rac, final java.lang.String rg) :
     execution(void facade.Facade.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = ((rg != null) && (rg != null));
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarFuncionario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 104, character 27 (facade.Facade.java:104), and \nby method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 106 (facade.Facade.java:106)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.apagarFuncionario regarding specifications at \n[spec-case]: line 104, character 27 (facade.Facade.java:104)"+", when \n"+"\t\'rg\' is "+rg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final facade.Facade object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.buscarFuncionario regarding code at \nFile \"facade.Facade.java\", line 120 (facade.Facade.java:120)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method criarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.criarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.criarMercadoria regarding code at \nFile \"facade.Facade.java\", line 126 (facade.Facade.java:126)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method editarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.editarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.editarMercadoria regarding code at \nFile \"facade.Facade.java\", line 130 (facade.Facade.java:130)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method apagarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarMercadoria regarding code at \nFile \"facade.Facade.java\", line 138 (facade.Facade.java:138)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method criarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.criarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.criarVenda regarding code at \nFile \"facade.Facade.java\", line 151 (facade.Facade.java:151)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition of
   * method editarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.editarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.editarVenda regarding code at \nFile \"facade.Facade.java\", line 155 (facade.Facade.java:155)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition of
   * method apagarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.apagarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarVenda regarding code at \nFile \"facade.Facade.java\", line 163 (facade.Facade.java:163)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method criarFuncionario. */
  void around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.criarFuncionario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.criarFuncionario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 41, character 36 (facade.Facade.java:41), line 42, character 43 (facade.Facade.java:42), line 43, character 41 (facade.Facade.java:43), line 44, character 42 (facade.Facade.java:44), line 45, character 53 (facade.Facade.java:45), line 46, character 44 (facade.Facade.java:46), line 47, character 46 (facade.Facade.java:47), and \nby method facade.Facade.criarFuncionario regarding code at \nFile \"facade.Facade.java\", line 49 (facade.Facade.java:49)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.criarFuncionario regarding specifications at \n[spec-case]: line 41, character 36 (facade.Facade.java:41), line 42, character 43 (facade.Facade.java:42), line 43, character 41 (facade.Facade.java:43), line 44, character 42 (facade.Facade.java:44), line 45, character 53 (facade.Facade.java:45), line 46, character 44 (facade.Facade.java:46), line 47, character 46 (facade.Facade.java:47)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.criarFuncionario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.criarFuncionario regarding code at \nFile \"facade.Facade.java\", line 49 (facade.Facade.java:49)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarFuncionario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.criarFuncionario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.criarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.criarFuncionario regarding code at \nFile \"facade.Facade.java\", line 49 (facade.Facade.java:49)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.criarFuncionario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method editarFuncionario. */
  void around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.editarFuncionario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.editarFuncionario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 52, character 36 (facade.Facade.java:52), line 53, character 43 (facade.Facade.java:53), line 54, character 41 (facade.Facade.java:54), line 55, character 42 (facade.Facade.java:55), line 56, character 53 (facade.Facade.java:56), line 57, character 44 (facade.Facade.java:57), line 58, character 46 (facade.Facade.java:58), and \nby method facade.Facade.editarFuncionario regarding code at \nFile \"facade.Facade.java\", line 60 (facade.Facade.java:60)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.editarFuncionario regarding specifications at \n[spec-case]: line 52, character 36 (facade.Facade.java:52), line 53, character 43 (facade.Facade.java:53), line 54, character 41 (facade.Facade.java:54), line 55, character 42 (facade.Facade.java:55), line 56, character 53 (facade.Facade.java:56), line 57, character 44 (facade.Facade.java:57), line 58, character 46 (facade.Facade.java:58)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.editarFuncionario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.editarFuncionario regarding code at \nFile \"facade.Facade.java\", line 60 (facade.Facade.java:60)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarFuncionario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.editarFuncionario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.editarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.editarFuncionario regarding code at \nFile \"facade.Facade.java\", line 60 (facade.Facade.java:60)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.editarFuncionario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method buscarSalario. */
  double around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double facade.Facade.buscarSalario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.buscarSalario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 63, character 36 (facade.Facade.java:63), line 64, character 43 (facade.Facade.java:64), line 65, character 41 (facade.Facade.java:65), line 66, character 42 (facade.Facade.java:66), line 67, character 53 (facade.Facade.java:67), line 68, character 44 (facade.Facade.java:68), line 69, character 46 (facade.Facade.java:69), and \nby method facade.Facade.buscarSalario regarding code at \nFile \"facade.Facade.java\", line 71 (facade.Facade.java:71)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.buscarSalario regarding specifications at \n[spec-case]: line 63, character 36 (facade.Facade.java:63), line 64, character 43 (facade.Facade.java:64), line 65, character 41 (facade.Facade.java:65), line 66, character 42 (facade.Facade.java:66), line 67, character 53 (facade.Facade.java:67), line 68, character 44 (facade.Facade.java:68), line 69, character 46 (facade.Facade.java:69)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.buscarSalario(models.funcionario.IFuncionario funcionario)");
      double rac$result = 0.0d;
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.buscarSalario regarding code at \nFile \"facade.Facade.java\", line 71 (facade.Facade.java:71)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarSalario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarSalario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.buscarSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.buscarSalario regarding code at \nFile \"facade.Facade.java\", line 71 (facade.Facade.java:71)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarSalario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
      return rac$result;
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method quantidadeVendas. */
  int around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int facade.Facade.quantidadeVendas(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.quantidadeVendas regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 74, character 36 (facade.Facade.java:74), line 75, character 43 (facade.Facade.java:75), line 76, character 41 (facade.Facade.java:76), line 77, character 42 (facade.Facade.java:77), line 78, character 53 (facade.Facade.java:78), line 79, character 44 (facade.Facade.java:79), line 80, character 46 (facade.Facade.java:80), and \nby method facade.Facade.quantidadeVendas regarding code at \nFile \"facade.Facade.java\", line 82 (facade.Facade.java:82)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.quantidadeVendas regarding specifications at \n[spec-case]: line 74, character 36 (facade.Facade.java:74), line 75, character 43 (facade.Facade.java:75), line 76, character 41 (facade.Facade.java:76), line 77, character 42 (facade.Facade.java:77), line 78, character 53 (facade.Facade.java:78), line 79, character 44 (facade.Facade.java:79), line 80, character 46 (facade.Facade.java:80)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
      int rac$result = 0;
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.quantidadeVendas regarding code at \nFile \"facade.Facade.java\", line 82 (facade.Facade.java:82)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.quantidadeVendas\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.quantidadeVendas regarding code at \nFile \"facade.Facade.java\", line 82 (facade.Facade.java:82)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
      return rac$result;
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method atualizarSalario. */
  void around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.atualizarSalario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((funcionario != null) && (funcionario.getRg() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.atualizarSalario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 85, character 36 (facade.Facade.java:85), line 86, character 41 (facade.Facade.java:86), line 87, character 46 (facade.Facade.java:87), and \nby method facade.Facade.atualizarSalario regarding code at \nFile \"facade.Facade.java\", line 89 (facade.Facade.java:89)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.atualizarSalario regarding specifications at \n[spec-case]: line 85, character 36 (facade.Facade.java:85), line 86, character 41 (facade.Facade.java:86), line 87, character 46 (facade.Facade.java:87)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((funcionario != null) && (funcionario.getRg() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.atualizarSalario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.atualizarSalario regarding code at \nFile \"facade.Facade.java\", line 89 (facade.Facade.java:89)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.atualizarSalario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.atualizarSalario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.atualizarSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.atualizarSalario regarding code at \nFile \"facade.Facade.java\", line 89 (facade.Facade.java:89)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.atualizarSalario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method apagarFuncionario. */
  void around (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.apagarFuncionario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && ((funcionario != null) && (funcionario.getRg() != null)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"facade.Facade.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method facade.Facade.apagarFuncionario regarding specifications at \nFile \"facade.Facade.java\", [spec-case]: line 109, character 36 (facade.Facade.java:109), line 110, character 41 (facade.Facade.java:110), and \nby method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 112 (facade.Facade.java:112)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"facade.Facade.java\" by method facade.Facade.apagarFuncionario regarding specifications at \n[spec-case]: line 109, character 36 (facade.Facade.java:109), line 110, character 41 (facade.Facade.java:110)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && ((funcionario != null) && (funcionario.getRg() != null)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "facade.Facade.apagarFuncionario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 112 (facade.Facade.java:112)";
        String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarFuncionario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.apagarFuncionario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"facade.Facade.java\" by method facade.Facade.apagarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 112 (facade.Facade.java:112)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.apagarFuncionario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Facade{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Facade;
    before(): (execution(java.lang.String facade.Facade.buscarRg(java.lang.String))
            || execution(int facade.Facade.buscarIdVendas(int))
            || execution(void facade.Facade.apagarFuncionario(java.lang.String))
            || execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String))
            || execution(void facade.Facade.criarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.editarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.criarVenda(models.venda.IVenda))
            || execution(void facade.Facade.editarVenda(models.venda.IVenda))
            || execution(void facade.Facade.apagarVenda(models.venda.IVenda))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Facade{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Facade, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * facade.Facade+.*(..))
            || execution(facade.Facade+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
