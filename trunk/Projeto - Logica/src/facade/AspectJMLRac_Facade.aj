package facade;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Facade {





















  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionarios. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarFuncionarios()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarFuncionarios()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarFuncionarios regarding code at \nFile \"facade.Facade.java\", line 57 (facade.Facade.java:57)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarFuncionarios()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final facade.Facade object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarFuncionario regarding code at \nFile \"facade.Facade.java\", line 61 (facade.Facade.java:61)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarMercadorias. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarMercadorias()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarMercadorias()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarMercadorias regarding code at \nFile \"facade.Facade.java\", line 83 (facade.Facade.java:83)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarMercadorias()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarMercadoria. */
  after (final facade.Facade object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.mercadoria.IMercadoria facade.Facade.buscarMercadoria(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarMercadoria(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarMercadoria regarding code at \nFile \"facade.Facade.java\", line 87 (facade.Facade.java:87)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarMercadoria(int ID)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarVendas. */
  after (final facade.Facade object$rac) throwing (Throwable rac$e) :
     execution(java.util.List facade.Facade.listarVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.listarVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.listarVendas regarding code at \nFile \"facade.Facade.java\", line 108 (facade.Facade.java:108)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.listarVendas()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarVenda. */
  after (final facade.Facade object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.venda.IVenda facade.Facade.buscarVenda(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "facade.Facade.buscarVenda(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method facade.Facade.buscarVenda regarding code at \nFile \"facade.Facade.java\", line 112 (facade.Facade.java:112)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "facade.Facade.buscarVenda(int ID)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * class Facade. */
  before (final facade.Facade object$rac) :
     execution(!static * facade.Facade+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = ((((object$rac.iDaoFuncionario != null) && (object$rac.iDaoMercadoria != null)) && (object$rac.iDaoVendas != null)) && (object$rac.DaoFactory != null));
       String invErrorMsg = "@pre <File \"Facade.java\"> regarding code at \nFile \"Facade.java\"\nnon_null for field 'iDaoFuncionario' <File \"facade.Facade.java\", line 14, character 49 (facade.Facade.java:14)>\nnon_null for field 'iDaoMercadoria' <File \"facade.Facade.java\", line 15, character 47 (facade.Facade.java:15)>\nnon_null for field 'iDaoVendas' <File \"facade.Facade.java\", line 16, character 39 (facade.Facade.java:16)>\nnon_null for field 'DaoFactory' <File \"facade.Facade.java\", line 17, character 39 (facade.Facade.java:17)>";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"Facade.java\"> regarding code at \nFile \"Facade.java\"\nnon_null for field 'iDaoFuncionario' <File \"facade.Facade.java\", line 14, character 49 (facade.Facade.java:14)>\nnon_null for field 'iDaoMercadoria' <File \"facade.Facade.java\", line 15, character 47 (facade.Facade.java:15)>\nnon_null for field 'iDaoVendas' <File \"facade.Facade.java\", line 16, character 39 (facade.Facade.java:16)>\nnon_null for field 'DaoFactory' <File \"facade.Facade.java\", line 17, character 39 (facade.Facade.java:17)>\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method criarFuncionario. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.criarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.criarFuncionario regarding code at \nFile \"facade.Facade.java\", line 29 (facade.Facade.java:29)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method editarFuncionario. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.editarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.editarFuncionario regarding code at \nFile \"facade.Facade.java\", line 33 (facade.Facade.java:33)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method buscarSalario. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double facade.Facade.buscarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.buscarSalario regarding code at \nFile \"facade.Facade.java\", line 37 (facade.Facade.java:37)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarSalario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method quantidadeVendas. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int facade.Facade.quantidadeVendas(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.quantidadeVendas regarding code at \nFile \"facade.Facade.java\", line 41 (facade.Facade.java:41)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.quantidadeVendas(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method atualizarSalario. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.atualizarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.atualizarSalario regarding code at \nFile \"facade.Facade.java\", line 45 (facade.Facade.java:45)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.atualizarSalario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final facade.Facade object$rac, final java.lang.String rg) :
     execution(void facade.Facade.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 49 (facade.Facade.java:49)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final facade.Facade object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void facade.Facade.apagarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarFuncionario regarding code at \nFile \"facade.Facade.java\", line 53 (facade.Facade.java:53)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final facade.Facade object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.buscarFuncionario regarding code at \nFile \"facade.Facade.java\", line 61 (facade.Facade.java:61)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method criarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.criarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.criarMercadoria regarding code at \nFile \"facade.Facade.java\", line 67 (facade.Facade.java:67)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method editarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.editarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.editarMercadoria regarding code at \nFile \"facade.Facade.java\", line 71 (facade.Facade.java:71)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method apagarMercadoria. */
  before (final facade.Facade object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarMercadoria regarding code at \nFile \"facade.Facade.java\", line 79 (facade.Facade.java:79)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method criarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.criarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.criarVenda regarding code at \nFile \"facade.Facade.java\", line 92 (facade.Facade.java:92)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.criarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition of
   * method editarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.editarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.editarVenda regarding code at \nFile \"facade.Facade.java\", line 96 (facade.Facade.java:96)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.editarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition of
   * method apagarVenda. */
  before (final facade.Facade object$rac, final models.venda.IVenda venda) :
     execution(void facade.Facade.apagarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method facade.Facade.apagarVenda regarding code at \nFile \"facade.Facade.java\", line 104 (facade.Facade.java:104)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"facade.Facade.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "facade.Facade.apagarVenda(models.venda.IVenda venda)");

     }


  /** Generated by JML to check non-static invariants of 
   * class Facade. */
  after (final facade.Facade object$rac) :
     (execution(!static * facade.Facade+.*(..)) || 
       execution(facade.Facade+.new(..))) && 
     !execution(void facade.Facade.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = ((((object$rac.iDaoFuncionario != null) && (object$rac.iDaoMercadoria != null)) && (object$rac.iDaoVendas != null)) && (object$rac.DaoFactory != null));
         String invErrorMsg = "@post <File \"Facade.java\"> regarding code at \nFile \"Facade.java\"\nnon_null for field 'iDaoFuncionario' <File \"facade.Facade.java\", line 14, character 49 (facade.Facade.java:14)>\nnon_null for field 'iDaoMercadoria' <File \"facade.Facade.java\", line 15, character 47 (facade.Facade.java:15)>\nnon_null for field 'iDaoVendas' <File \"facade.Facade.java\", line 16, character 39 (facade.Facade.java:16)>\nnon_null for field 'DaoFactory' <File \"facade.Facade.java\", line 17, character 39 (facade.Facade.java:17)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Facade.java\"> regarding code at \nFile \"Facade.java\"\nnon_null for field 'iDaoFuncionario' <File \"facade.Facade.java\", line 14, character 49 (facade.Facade.java:14)>\nnon_null for field 'iDaoMercadoria' <File \"facade.Facade.java\", line 15, character 47 (facade.Facade.java:15)>\nnon_null for field 'iDaoVendas' <File \"facade.Facade.java\", line 16, character 39 (facade.Facade.java:16)>\nnon_null for field 'DaoFactory' <File \"facade.Facade.java\", line 17, character 39 (facade.Facade.java:17)>\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Facade{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Facade;
    before(): (execution(void facade.Facade.criarFuncionario(models.funcionario.IFuncionario))
            || execution(void facade.Facade.editarFuncionario(models.funcionario.IFuncionario))
            || execution(double facade.Facade.buscarSalario(models.funcionario.IFuncionario))
            || execution(int facade.Facade.quantidadeVendas(models.funcionario.IFuncionario))
            || execution(void facade.Facade.atualizarSalario(models.funcionario.IFuncionario))
            || execution(void facade.Facade.apagarFuncionario(java.lang.String))
            || execution(void facade.Facade.apagarFuncionario(models.funcionario.IFuncionario))
            || execution(models.funcionario.IFuncionario facade.Facade.buscarFuncionario(java.lang.String))
            || execution(void facade.Facade.criarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.editarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.apagarMercadoria(models.mercadoria.IMercadoria))
            || execution(void facade.Facade.criarVenda(models.venda.IVenda))
            || execution(void facade.Facade.editarVenda(models.venda.IVenda))
            || execution(void facade.Facade.apagarVenda(models.venda.IVenda))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Facade{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Facade, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * facade.Facade+.*(..))
            || execution(facade.Facade+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
