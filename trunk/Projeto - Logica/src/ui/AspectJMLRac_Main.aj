package ui;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Main {







































  /** Generated by JML to check the normal postcondition of
   * method CalcularReajuste. */
  after (final ui.Main object$rac, final java.lang.String rg) returning (double rac$result) :
     execution(double ui.Main.CalcularReajuste(java.lang.String)) && this(object$rac) && args(rg) {
       boolean rac$b = (!((rg != null) && (rg != null)) || (rac$result >= +0.0D));
       String nPostErrorMsg =  "by method ui.Main.CalcularReajuste regarding specifications at \nFile \"ui.Main.java\", [spec-case]: line 382, character 31 (ui.Main.java:382), and \nby method ui.Main.CalcularReajuste regarding code at \nFile \"ui.Main.java\", line 393 (ui.Main.java:393)";
       String evalErrorMsg = "Invalid expression in \"ui.Main.java\" by method ui.Main.CalcularReajuste regarding specifications at \n[spec-case]: line 382, character 31 (ui.Main.java:382)\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "ui.Main.CalcularReajuste(java.lang.String rg)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method CalcularReajuste. */
  after (final ui.Main object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(double ui.Main.CalcularReajuste(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.CalcularReajuste(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((rg != null) && (rg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"ui.Main.java\" by method ui.Main.CalcularReajuste\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method ui.Main.CalcularReajuste regarding code at \nFile \"ui.Main.java\", line 393 (ui.Main.java:393)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.CalcularReajuste(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method funcionarioNome. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.funcionarioNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.funcionarioNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.funcionarioNome regarding code at \nFile \"ui.Main.java\", line 461 (ui.Main.java:461)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.funcionarioNome()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method setRg. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.setRg()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.setRg()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.setRg regarding code at \nFile \"ui.Main.java\", line 496 (ui.Main.java:496)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.setRg()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method setCPF. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.setCPF()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.setCPF()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.setCPF regarding code at \nFile \"ui.Main.java\", line 530 (ui.Main.java:530)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.setCPF()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method setData. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.setData()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.setData()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.setData regarding code at \nFile \"ui.Main.java\", line 577 (ui.Main.java:577)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.setData()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method quebraData. */
  after (final ui.Main object$rac, final java.lang.String dataString) throwing (Throwable rac$e) :
     execution(int[] ui.Main.quebraData(java.lang.String)) && this(object$rac) && args(dataString) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.quebraData(java.lang.String dataString)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.quebraData regarding code at \nFile \"ui.Main.java\", line 587 (ui.Main.java:587)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.quebraData(java.lang.String dataString)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method funcionarioCargo. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.funcionarioCargo()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.funcionarioCargo()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.funcionarioCargo regarding code at \nFile \"ui.Main.java\", line 695 (ui.Main.java:695)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.funcionarioCargo()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method mercadoriaProduto. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.mercadoriaProduto()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.mercadoriaProduto()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.mercadoriaProduto regarding code at \nFile \"ui.Main.java\", line 920 (ui.Main.java:920)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.mercadoriaProduto()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method mercadoriaTamanho. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.mercadoriaTamanho()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.mercadoriaTamanho()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.mercadoriaTamanho regarding code at \nFile \"ui.Main.java\", line 961 (ui.Main.java:961)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.mercadoriaTamanho()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method mercadoriaCor. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.mercadoriaCor()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.mercadoriaCor()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.mercadoriaCor regarding code at \nFile \"ui.Main.java\", line 999 (ui.Main.java:999)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.mercadoriaCor()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method mercadoriaNome. */
  after (final ui.Main object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String ui.Main.mercadoriaNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.mercadoriaNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method ui.Main.mercadoriaNome regarding code at \nFile \"ui.Main.java\", line 1074 (ui.Main.java:1074)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.mercadoriaNome()");
  	 }


  /** Generated by JML to check the precondition of
   * method CalcularReajuste. */
  before (final ui.Main object$rac, final java.lang.String rg) :
     execution(double ui.Main.CalcularReajuste(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = ((rg != null) && (rg != null));
       boolean canThrow = false;
       String preErrorMsg = "by method ui.Main.CalcularReajuste regarding specifications at \nFile \"ui.Main.java\", [spec-case]: line 381, character 27 (ui.Main.java:381), and \nby method ui.Main.CalcularReajuste regarding code at \nFile \"ui.Main.java\", line 385 (ui.Main.java:385)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"ui.Main.java\" by method ui.Main.CalcularReajuste regarding specifications at \n[spec-case]: line 381, character 27 (ui.Main.java:381)"+", when \n"+"\t\'rg\' is "+rg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "ui.Main.CalcularReajuste(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method quebraData. */
  before (final ui.Main object$rac, final java.lang.String dataString) :
     execution(int[] ui.Main.quebraData(java.lang.String)) && 
     this(object$rac) && args(dataString) {
       boolean rac$b = (dataString != null);
       boolean canThrow = false;
       String preErrorMsg = "by method ui.Main.quebraData regarding code at \nFile \"ui.Main.java\", line 581 (ui.Main.java:581)"+", when \n"+"\t\'dataString\' is "+dataString;
       String evalErrorMsg = "Invalid expression in \"ui.Main.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "ui.Main.quebraData(java.lang.String dataString)");

     }

  /** Generated by JML to check the precondition of
   * method checaData. */
  before (final ui.Main object$rac, final int[] dataInt) :
     execution(boolean ui.Main.checaData(int[])) && 
     this(object$rac) && args(dataInt) {
       boolean rac$b = (dataInt != null);
       boolean canThrow = false;
       String preErrorMsg = "by method ui.Main.checaData regarding code at \nFile \"ui.Main.java\", line 591 (ui.Main.java:591)"+", when \n"+"\t\'dataInt\' is "+dataInt;
       String evalErrorMsg = "Invalid expression in \"ui.Main.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "ui.Main.checaData(int[] dataInt)");

     }

  /** Generated by JML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void ui.Main.main(java.lang.String[])) && args(args) {
       boolean rac$b = (args != null);
       boolean canThrow = true;
       String preErrorMsg = "by method ui.Main.main regarding code at \nFile \"ui.Main.java\", line 1432 (ui.Main.java:1432)"+", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"ui.Main.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "ui.Main.main(java.lang.String[] args)");

     }

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method QuantificarReajuste. */
  double around (final ui.Main object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double ui.Main.QuantificarReajuste(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      boolean rac$pre1;
      boolean rac$pre2;
      boolean rac$pre3;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Caixa")))));
  		rac$pre1 = ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Estoquista")))));
  		rac$pre2 = ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Vendedor")))));
  		rac$pre3 = ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Gerente")))));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste regarding specifications at \n[spec-case]: line 157, character 31 (ui.Main.java:157), and \n[spec-case]: line 165, character 31 (ui.Main.java:165), and \n[spec-case]: line 173, character 31 (ui.Main.java:173), and \n[spec-case]: line 181, character 31 (ui.Main.java:181)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = "by method ui.Main.QuantificarReajuste regarding specifications at \nFile \"ui.Main.java\", [spec-case]: line 154, character 36 (ui.Main.java:154), line 155, character 46 (ui.Main.java:155), line 156, character 60 (ui.Main.java:156), and \n[spec-case]: line 162, character 36 (ui.Main.java:162), line 163, character 46 (ui.Main.java:163), line 164, character 65 (ui.Main.java:164), and \n[spec-case]: line 170, character 36 (ui.Main.java:170), line 171, character 46 (ui.Main.java:171), line 172, character 63 (ui.Main.java:172), and \n[spec-case]: line 178, character 36 (ui.Main.java:178), line 179, character 46 (ui.Main.java:179), line 180, character 62 (ui.Main.java:180), and \nby method ui.Main.QuantificarReajuste regarding code at \nFile \"ui.Main.java\", line 183 (ui.Main.java:183)"+", when \n"+"\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste regarding specifications at \n[spec-case]: line 154, character 36 (ui.Main.java:154), line 155, character 46 (ui.Main.java:155), line 156, character 60 (ui.Main.java:156), and \n[spec-case]: line 162, character 36 (ui.Main.java:162), line 163, character 46 (ui.Main.java:163), line 164, character 65 (ui.Main.java:164), and \n[spec-case]: line 170, character 36 (ui.Main.java:170), line 171, character 46 (ui.Main.java:171), line 172, character 63 (ui.Main.java:172), and \n[spec-case]: line 178, character 36 (ui.Main.java:178), line 179, character 46 (ui.Main.java:179), line 180, character 62 (ui.Main.java:180)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = (((((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Caixa"))))) || ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Estoquista")))))) || ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Vendedor")))))) || ((funcionario != null) && (((funcionario != null) && (funcionario.getSalario() > +0.0D)) && funcionario.getCargo().equals(((java.lang.Object) ("Gerente"))))));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "ui.Main.QuantificarReajuste(models.funcionario.IFuncionario funcionario)");
      double rac$result = 0.0d;
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        rac$b = ((((!rac$pre0 || (rac$result == (funcionario.getSalario() + (funcionario.getSalario() * 0.05D)))) && (!rac$pre1 || (rac$result == (funcionario.getSalario() + (funcionario.getSalario() * 0.05D))))) && (!rac$pre2 || (rac$result == (funcionario.getSalario() + (funcionario.getSalario() * 0.07D))))) && (!rac$pre3 || (rac$result == (funcionario.getSalario() + (funcionario.getSalario() * 0.09D)))));
        String nPostErrorMsg =  "by method ui.Main.QuantificarReajuste regarding specifications at \nFile \"ui.Main.java\", [spec-case]: line 157, character 31 (ui.Main.java:157), and \n[spec-case]: line 165, character 31 (ui.Main.java:165), and \n[spec-case]: line 173, character 31 (ui.Main.java:173), and \n[spec-case]: line 181, character 31 (ui.Main.java:181), and \nby method ui.Main.QuantificarReajuste regarding code at \nFile \"ui.Main.java\", line 205 (ui.Main.java:205)"+", when \n"+"\t\'funcionario\' is "+funcionario;
        String evalErrorMsg = "Invalid expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste regarding specifications at \n[spec-case]: line 157, character 31 (ui.Main.java:157), and \n[spec-case]: line 165, character 31 (ui.Main.java:165), and \n[spec-case]: line 173, character 31 (ui.Main.java:173), and \n[spec-case]: line 181, character 31 (ui.Main.java:181)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "ui.Main.QuantificarReajuste(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "ui.Main.QuantificarReajuste(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
  		   if (rac$b && rac$pre1) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b1 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b1 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b1 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b1;
  		     }
  		   }
  		   if (rac$b && rac$pre2) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b2 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b2 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b2 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b2;
  		     }
  		   }
  		   if (rac$b && rac$pre3) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b3 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b3 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b3 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"ui.Main.java\" by method ui.Main.QuantificarReajuste\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b3;
  		     }
  		   }
           String xPostErrorMsg =  "by method ui.Main.QuantificarReajuste regarding code at \nFile \"ui.Main.java\", line 205 (ui.Main.java:205)";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "ui.Main.QuantificarReajuste(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
      return rac$result;
  	}



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Main{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Main;
    before(): (execution(double ui.Main.CalcularReajuste(java.lang.String))
            || execution(int[] ui.Main.quebraData(java.lang.String))
            || execution(boolean ui.Main.checaData(int[]))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Main{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Main, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * ui.Main+.*(..))
            || execution(ui.Main+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
