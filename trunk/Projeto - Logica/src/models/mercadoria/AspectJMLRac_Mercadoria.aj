package models.mercadoria;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_Mercadoria {











  /** Generated by JML to access the model field ipreco. */
  before (models.mercadoria.IMercadoria object$rac): get(double models.mercadoria.IMercadoria.ipreco) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.ipreco = ((models.mercadoria.Mercadoria)object$rac).preco;
  }

  /** Generated by JML to access the model field iID. */
  before (models.mercadoria.IMercadoria object$rac): get(int models.mercadoria.IMercadoria.iID) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.iID = ((models.mercadoria.Mercadoria)object$rac).ID;
  }

  /** Generated by JML to access the model field inome. */
  before (models.mercadoria.IMercadoria object$rac): get(java.lang.String models.mercadoria.IMercadoria.inome) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.inome = ((java.lang.String) (((models.mercadoria.Mercadoria)object$rac).nome));
  }

  /** Generated by JML to access the model field icor. */
  before (models.mercadoria.IMercadoria object$rac): get(java.lang.String models.mercadoria.IMercadoria.icor) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.icor = ((java.lang.String) (((models.mercadoria.Mercadoria)object$rac).cor));
  }

  /** Generated by JML to access the model field itamanho. */
  before (models.mercadoria.IMercadoria object$rac): get(java.lang.String models.mercadoria.IMercadoria.itamanho) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.itamanho = ((java.lang.String) (((models.mercadoria.Mercadoria)object$rac).tamanho));
  }

  /** Generated by JML to access the model field iproduto. */
  before (models.mercadoria.IMercadoria object$rac): get(java.lang.String models.mercadoria.IMercadoria.iproduto) && target (object$rac)
  && if (object$rac instanceof models.mercadoria.Mercadoria){
    object$rac.iproduto = ((java.lang.String) (((models.mercadoria.Mercadoria)object$rac).produto));
  }

  /** Generated by JML to check the normal postcondition of
   * method getPreco. */
  after (final models.mercadoria.Mercadoria object$rac) returning (double rac$result) :
     execution(double models.mercadoria.Mercadoria.getPreco()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.preco));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getPreco regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 30, character 31 (models.mercadoria.Mercadoria.java:30), and \nby method models.mercadoria.Mercadoria.getPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 32 (models.mercadoria.Mercadoria.java:32)"+", when \n"+"\t\'this.preco\' is "+object$rac.preco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getPreco regarding specifications at \n[spec-case]: line 30, character 31 (models.mercadoria.Mercadoria.java:30)"+", when \n"+"\t\'this.preco\' is "+object$rac.preco+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getPreco()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getPreco. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(double models.mercadoria.Mercadoria.getPreco()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getPreco()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getPreco\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 32 (models.mercadoria.Mercadoria.java:32)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getPreco()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getID. */
  after (final models.mercadoria.Mercadoria object$rac) returning (int rac$result) :
     execution(int models.mercadoria.Mercadoria.getID()) && this(object$rac) {
       boolean rac$b = (!true || (rac$result == object$rac.ID));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getID regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 36, character 33 (models.mercadoria.Mercadoria.java:36), and \nby method models.mercadoria.Mercadoria.getID regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 38 (models.mercadoria.Mercadoria.java:38)"+", when \n"+"\t\'this.ID\' is "+object$rac.ID;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getID regarding specifications at \n[spec-case]: line 36, character 33 (models.mercadoria.Mercadoria.java:36)"+", when \n"+"\t\'this.ID\' is "+object$rac.ID+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getID()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getID. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(int models.mercadoria.Mercadoria.getID()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getID()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getID\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getID regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 38 (models.mercadoria.Mercadoria.java:38)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getID()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getNome. */
  after (final models.mercadoria.Mercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.Mercadoria.getNome()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.nome)));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getNome regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 42, character 31 (models.mercadoria.Mercadoria.java:42), and \nby method models.mercadoria.Mercadoria.getNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 44 (models.mercadoria.Mercadoria.java:44)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getNome regarding specifications at \n[spec-case]: line 42, character 31 (models.mercadoria.Mercadoria.java:42)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getNome()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getNome. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.Mercadoria.getNome()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getNome()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 44 (models.mercadoria.Mercadoria.java:44)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getNome()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getCor. */
  after (final models.mercadoria.Mercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.Mercadoria.getCor()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.cor)));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getCor regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 48, character 31 (models.mercadoria.Mercadoria.java:48), and \nby method models.mercadoria.Mercadoria.getCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 50 (models.mercadoria.Mercadoria.java:50)"+", when \n"+"\t\'this.cor\' is "+object$rac.cor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getCor regarding specifications at \n[spec-case]: line 48, character 31 (models.mercadoria.Mercadoria.java:48)"+", when \n"+"\t\'this.cor\' is "+object$rac.cor+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getCor()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getCor. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.Mercadoria.getCor()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getCor()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getCor\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 50 (models.mercadoria.Mercadoria.java:50)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getCor()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getTamanho. */
  after (final models.mercadoria.Mercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.Mercadoria.getTamanho()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.tamanho)));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getTamanho regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 54, character 31 (models.mercadoria.Mercadoria.java:54), and \nby method models.mercadoria.Mercadoria.getTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 56 (models.mercadoria.Mercadoria.java:56)"+", when \n"+"\t\'this.tamanho\' is "+object$rac.tamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getTamanho regarding specifications at \n[spec-case]: line 54, character 31 (models.mercadoria.Mercadoria.java:54)"+", when \n"+"\t\'this.tamanho\' is "+object$rac.tamanho+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getTamanho()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getTamanho. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.Mercadoria.getTamanho()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getTamanho()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getTamanho\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 56 (models.mercadoria.Mercadoria.java:56)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getTamanho()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method getProduto. */
  after (final models.mercadoria.Mercadoria object$rac) returning (java.lang.String rac$result) :
     execution(java.lang.String models.mercadoria.Mercadoria.getProduto()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result == object$rac.produto)));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.getProduto regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 60, character 31 (models.mercadoria.Mercadoria.java:60), and \nby method models.mercadoria.Mercadoria.getProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 62 (models.mercadoria.Mercadoria.java:62)"+", when \n"+"\t\'this.produto\' is "+object$rac.produto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getProduto regarding specifications at \n[spec-case]: line 60, character 31 (models.mercadoria.Mercadoria.java:60)"+", when \n"+"\t\'this.produto\' is "+object$rac.produto+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getProduto()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method getProduto. */
  after (final models.mercadoria.Mercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.lang.String models.mercadoria.Mercadoria.getProduto()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.getProduto()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getProduto\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.getProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 62 (models.mercadoria.Mercadoria.java:62)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.getProduto()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setPreco. */
  after (final models.mercadoria.Mercadoria object$rac, final double novoPreco) returning () :
     execution(void models.mercadoria.Mercadoria.setPreco(double)) && this(object$rac) && args(novoPreco) {
       boolean rac$b = (!(novoPreco > +0.0D) || (object$rac.preco == novoPreco));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.setPreco regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 69, character 29 (models.mercadoria.Mercadoria.java:69), and \nby method models.mercadoria.Mercadoria.setPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 71 (models.mercadoria.Mercadoria.java:71)"+", when \n"+"\t\'this.preco\' is "+object$rac.preco+"\n\t\'novoPreco\' is "+novoPreco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setPreco regarding specifications at \n[spec-case]: line 69, character 29 (models.mercadoria.Mercadoria.java:69)"+", when \n"+"\t\'this.preco\' is "+object$rac.preco+"\n\t\'novoPreco\' is "+novoPreco+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setPreco(double novoPreco)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setPreco. */
  after (final models.mercadoria.Mercadoria object$rac, final double novoPreco) throwing (Throwable rac$e) :
     execution(void models.mercadoria.Mercadoria.setPreco(double)) && this(object$rac) && args(novoPreco) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.setPreco(double novoPreco)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && (novoPreco > +0.0D)) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setPreco\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.setPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 71 (models.mercadoria.Mercadoria.java:71)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.setPreco(double novoPreco)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setNome. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoNome) returning () :
     execution(void models.mercadoria.Mercadoria.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
       boolean rac$b = (!((novoNome != null) && (novoNome != null)) || (object$rac.nome == novoNome));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.setNome regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 77, character 28 (models.mercadoria.Mercadoria.java:77), and \nby method models.mercadoria.Mercadoria.setNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 79 (models.mercadoria.Mercadoria.java:79)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setNome regarding specifications at \n[spec-case]: line 77, character 28 (models.mercadoria.Mercadoria.java:77)"+", when \n"+"\t\'this.nome\' is "+object$rac.nome+"\n\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setNome. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoNome) throwing (Throwable rac$e) :
     execution(void models.mercadoria.Mercadoria.setNome(java.lang.String)) && this(object$rac) && args(novoNome) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.setNome(java.lang.String novoNome)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoNome != null) && (novoNome != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setNome\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.setNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 79 (models.mercadoria.Mercadoria.java:79)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.setNome(java.lang.String novoNome)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setCor. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novaCor) returning () :
     execution(void models.mercadoria.Mercadoria.setCor(java.lang.String)) && this(object$rac) && args(novaCor) {
       boolean rac$b = (!((novaCor != null) && (novaCor != null)) || (object$rac.cor == novaCor));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.setCor regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 85, character 27 (models.mercadoria.Mercadoria.java:85), and \nby method models.mercadoria.Mercadoria.setCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 87 (models.mercadoria.Mercadoria.java:87)"+", when \n"+"\t\'this.cor\' is "+object$rac.cor+"\n\t\'novaCor\' is "+novaCor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setCor regarding specifications at \n[spec-case]: line 85, character 27 (models.mercadoria.Mercadoria.java:85)"+", when \n"+"\t\'this.cor\' is "+object$rac.cor+"\n\t\'novaCor\' is "+novaCor+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setCor(java.lang.String novaCor)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setCor. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novaCor) throwing (Throwable rac$e) :
     execution(void models.mercadoria.Mercadoria.setCor(java.lang.String)) && this(object$rac) && args(novaCor) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.setCor(java.lang.String novaCor)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novaCor != null) && (novaCor != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setCor\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.setCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 87 (models.mercadoria.Mercadoria.java:87)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.setCor(java.lang.String novaCor)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setTamanho. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoTamanho) returning () :
     execution(void models.mercadoria.Mercadoria.setTamanho(java.lang.String)) && this(object$rac) && args(novoTamanho) {
       boolean rac$b = (!((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG"))) || (object$rac.tamanho == novoTamanho));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.setTamanho regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 96, character 31 (models.mercadoria.Mercadoria.java:96), and \nby method models.mercadoria.Mercadoria.setTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 98 (models.mercadoria.Mercadoria.java:98)"+", when \n"+"\t\'this.tamanho\' is "+object$rac.tamanho+"\n\t\'novoTamanho\' is "+novoTamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setTamanho regarding specifications at \n[spec-case]: line 96, character 31 (models.mercadoria.Mercadoria.java:96)"+", when \n"+"\t\'this.tamanho\' is "+object$rac.tamanho+"\n\t\'novoTamanho\' is "+novoTamanho+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setTamanho(java.lang.String novoTamanho)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setTamanho. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoTamanho) throwing (Throwable rac$e) :
     execution(void models.mercadoria.Mercadoria.setTamanho(java.lang.String)) && this(object$rac) && args(novoTamanho) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.setTamanho(java.lang.String novoTamanho)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG")))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setTamanho\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.setTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 98 (models.mercadoria.Mercadoria.java:98)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.setTamanho(java.lang.String novoTamanho)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method setProduto. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoProduto) returning () :
     execution(void models.mercadoria.Mercadoria.setProduto(java.lang.String)) && this(object$rac) && args(novoProduto) {
       boolean rac$b = (!((novoProduto != null) && (novoProduto != null)) || (object$rac.produto == novoProduto));
       String nPostErrorMsg =  "by method models.mercadoria.Mercadoria.setProduto regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 104, character 31 (models.mercadoria.Mercadoria.java:104), and \nby method models.mercadoria.Mercadoria.setProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 106 (models.mercadoria.Mercadoria.java:106)"+", when \n"+"\t\'this.produto\' is "+object$rac.produto+"\n\t\'novoProduto\' is "+novoProduto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setProduto regarding specifications at \n[spec-case]: line 104, character 31 (models.mercadoria.Mercadoria.java:104)"+", when \n"+"\t\'this.produto\' is "+object$rac.produto+"\n\t\'novoProduto\' is "+novoProduto+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setProduto(java.lang.String novoProduto)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method setProduto. */
  after (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoProduto) throwing (Throwable rac$e) :
     execution(void models.mercadoria.Mercadoria.setProduto(java.lang.String)) && this(object$rac) && args(novoProduto) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "models.mercadoria.Mercadoria.setProduto(java.lang.String novoProduto)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((novoProduto != null) && (novoProduto != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setProduto\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method models.mercadoria.Mercadoria.setProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 106 (models.mercadoria.Mercadoria.java:106)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "models.mercadoria.Mercadoria.setProduto(java.lang.String novoProduto)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * class Mercadoria. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(!static * models.mercadoria.Mercadoria+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = ((((object$rac.nome != null) && (object$rac.cor != null)) && (object$rac.tamanho != null)) && (object$rac.produto != null));
       String invErrorMsg = "@pre <File \"Mercadoria.java\"> regarding code at \nFile \"Mercadoria.java\"\nnon_null for field 'nome' <File \"models.mercadoria.Mercadoria.java\", line 13, character 49 (models.mercadoria.Mercadoria.java:13)>\nnon_null for field 'cor' <File \"models.mercadoria.Mercadoria.java\", line 17, character 48 (models.mercadoria.Mercadoria.java:17)>\nnon_null for field 'tamanho' <File \"models.mercadoria.Mercadoria.java\", line 21, character 52 (models.mercadoria.Mercadoria.java:21)>\nnon_null for field 'produto' <File \"models.mercadoria.Mercadoria.java\", line 25, character 52 (models.mercadoria.Mercadoria.java:25)>";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"Mercadoria.java\"> regarding code at \nFile \"Mercadoria.java\"\nnon_null for field 'nome' <File \"models.mercadoria.Mercadoria.java\", line 13, character 49 (models.mercadoria.Mercadoria.java:13)>\nnon_null for field 'cor' <File \"models.mercadoria.Mercadoria.java\", line 17, character 48 (models.mercadoria.Mercadoria.java:17)>\nnon_null for field 'tamanho' <File \"models.mercadoria.Mercadoria.java\", line 21, character 52 (models.mercadoria.Mercadoria.java:21)>\nnon_null for field 'produto' <File \"models.mercadoria.Mercadoria.java\", line 25, character 52 (models.mercadoria.Mercadoria.java:25)>\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method getPreco. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(double models.mercadoria.Mercadoria.getPreco()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getPreco regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 30, character 20 (models.mercadoria.Mercadoria.java:30), and \nby method models.mercadoria.Mercadoria.getPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 32 (models.mercadoria.Mercadoria.java:32)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getPreco regarding specifications at \n[spec-case]: line 30, character 20 (models.mercadoria.Mercadoria.java:30)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getPreco()");

     }

  /** Generated by JML to check the precondition of
   * method getID. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(int models.mercadoria.Mercadoria.getID()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getID regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 36, character 22 (models.mercadoria.Mercadoria.java:36), and \nby method models.mercadoria.Mercadoria.getID regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 38 (models.mercadoria.Mercadoria.java:38)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getID regarding specifications at \n[spec-case]: line 36, character 22 (models.mercadoria.Mercadoria.java:36)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getID()");

     }

  /** Generated by JML to check the precondition of
   * method getNome. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(java.lang.String models.mercadoria.Mercadoria.getNome()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getNome regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 42, character 20 (models.mercadoria.Mercadoria.java:42), and \nby method models.mercadoria.Mercadoria.getNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 44 (models.mercadoria.Mercadoria.java:44)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getNome regarding specifications at \n[spec-case]: line 42, character 20 (models.mercadoria.Mercadoria.java:42)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getNome()");

     }

  /** Generated by JML to check the precondition of
   * method getCor. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(java.lang.String models.mercadoria.Mercadoria.getCor()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getCor regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 48, character 20 (models.mercadoria.Mercadoria.java:48), and \nby method models.mercadoria.Mercadoria.getCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 50 (models.mercadoria.Mercadoria.java:50)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getCor regarding specifications at \n[spec-case]: line 48, character 20 (models.mercadoria.Mercadoria.java:48)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getCor()");

     }

  /** Generated by JML to check the precondition of
   * method getTamanho. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(java.lang.String models.mercadoria.Mercadoria.getTamanho()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getTamanho regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 54, character 20 (models.mercadoria.Mercadoria.java:54), and \nby method models.mercadoria.Mercadoria.getTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 56 (models.mercadoria.Mercadoria.java:56)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getTamanho regarding specifications at \n[spec-case]: line 54, character 20 (models.mercadoria.Mercadoria.java:54)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getTamanho()");

     }

  /** Generated by JML to check the precondition of
   * method getProduto. */
  before (final models.mercadoria.Mercadoria object$rac) :
     execution(java.lang.String models.mercadoria.Mercadoria.getProduto()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.getProduto regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 60, character 20 (models.mercadoria.Mercadoria.java:60), and \nby method models.mercadoria.Mercadoria.getProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 62 (models.mercadoria.Mercadoria.java:62)";
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.getProduto regarding specifications at \n[spec-case]: line 60, character 20 (models.mercadoria.Mercadoria.java:60)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.getProduto()");

     }

  /** Generated by JML to check the precondition of
   * method setPreco. */
  before (final models.mercadoria.Mercadoria object$rac, final double novoPreco) :
     execution(void models.mercadoria.Mercadoria.setPreco(double)) && 
     this(object$rac) && args(novoPreco) {
       boolean rac$b = (novoPreco > +0.0D);
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.setPreco regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 67, character 33 (models.mercadoria.Mercadoria.java:67), and \nby method models.mercadoria.Mercadoria.setPreco regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 71 (models.mercadoria.Mercadoria.java:71)"+", when \n"+"\t\'novoPreco\' is "+novoPreco;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setPreco regarding specifications at \n[spec-case]: line 67, character 33 (models.mercadoria.Mercadoria.java:67)"+", when \n"+"\t\'novoPreco\' is "+novoPreco+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setPreco(double novoPreco)");

     }

  /** Generated by JML to check the precondition of
   * method setNome. */
  before (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoNome) :
     execution(void models.mercadoria.Mercadoria.setNome(java.lang.String)) && 
     this(object$rac) && args(novoNome) {
       boolean rac$b = ((novoNome != null) && (novoNome != null));
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.setNome regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 75, character 33 (models.mercadoria.Mercadoria.java:75), and \nby method models.mercadoria.Mercadoria.setNome regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 79 (models.mercadoria.Mercadoria.java:79)"+", when \n"+"\t\'novoNome\' is "+novoNome;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setNome regarding specifications at \n[spec-case]: line 75, character 33 (models.mercadoria.Mercadoria.java:75)"+", when \n"+"\t\'novoNome\' is "+novoNome+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setNome(java.lang.String novoNome)");

     }

  /** Generated by JML to check the precondition of
   * method setCor. */
  before (final models.mercadoria.Mercadoria object$rac, final java.lang.String novaCor) :
     execution(void models.mercadoria.Mercadoria.setCor(java.lang.String)) && 
     this(object$rac) && args(novaCor) {
       boolean rac$b = ((novaCor != null) && (novaCor != null));
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.setCor regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 83, character 32 (models.mercadoria.Mercadoria.java:83), and \nby method models.mercadoria.Mercadoria.setCor regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 87 (models.mercadoria.Mercadoria.java:87)"+", when \n"+"\t\'novaCor\' is "+novaCor;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setCor regarding specifications at \n[spec-case]: line 83, character 32 (models.mercadoria.Mercadoria.java:83)"+", when \n"+"\t\'novaCor\' is "+novaCor+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setCor(java.lang.String novaCor)");

     }

  /** Generated by JML to check the precondition of
   * method setTamanho. */
  before (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoTamanho) :
     execution(void models.mercadoria.Mercadoria.setTamanho(java.lang.String)) && 
     this(object$rac) && args(novoTamanho) {
       boolean rac$b = ((novoTamanho != null) && (((novoTamanho.equalsIgnoreCase("P") || novoTamanho.equalsIgnoreCase("M")) || novoTamanho.equalsIgnoreCase("G")) || novoTamanho.equalsIgnoreCase("GG")));
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.setTamanho regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 91, character 55 (models.mercadoria.Mercadoria.java:91), and \nby method models.mercadoria.Mercadoria.setTamanho regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 98 (models.mercadoria.Mercadoria.java:98)"+", when \n"+"\t\'novoTamanho\' is "+novoTamanho;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setTamanho regarding specifications at \n[spec-case]: line 91, character 55 (models.mercadoria.Mercadoria.java:91)"+", when \n"+"\t\'novoTamanho\' is "+novoTamanho+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setTamanho(java.lang.String novoTamanho)");

     }

  /** Generated by JML to check the precondition of
   * method setProduto. */
  before (final models.mercadoria.Mercadoria object$rac, final java.lang.String novoProduto) :
     execution(void models.mercadoria.Mercadoria.setProduto(java.lang.String)) && 
     this(object$rac) && args(novoProduto) {
       boolean rac$b = ((novoProduto != null) && (novoProduto != null));
       boolean canThrow = false;
       String preErrorMsg = "by method models.mercadoria.Mercadoria.setProduto regarding specifications at \nFile \"models.mercadoria.Mercadoria.java\", [spec-case]: line 102, character 36 (models.mercadoria.Mercadoria.java:102), and \nby method models.mercadoria.Mercadoria.setProduto regarding code at \nFile \"models.mercadoria.Mercadoria.java\", line 106 (models.mercadoria.Mercadoria.java:106)"+", when \n"+"\t\'novoProduto\' is "+novoProduto;
       String evalErrorMsg = "Invalid expression in \"models.mercadoria.Mercadoria.java\" by method models.mercadoria.Mercadoria.setProduto regarding specifications at \n[spec-case]: line 102, character 36 (models.mercadoria.Mercadoria.java:102)"+", when \n"+"\t\'novoProduto\' is "+novoProduto+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "models.mercadoria.Mercadoria.setProduto(java.lang.String novoProduto)");

     }


  /** Generated by JML to check non-static invariants of 
   * class Mercadoria. */
  after (final models.mercadoria.Mercadoria object$rac) :
     (execution(!static * models.mercadoria.Mercadoria+.*(..)) || 
       execution(models.mercadoria.Mercadoria+.new(..))) && 
     !execution(void models.mercadoria.Mercadoria.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = ((((object$rac.nome != null) && (object$rac.cor != null)) && (object$rac.tamanho != null)) && (object$rac.produto != null));
         String invErrorMsg = "@post <File \"Mercadoria.java\"> regarding code at \nFile \"Mercadoria.java\"\nnon_null for field 'nome' <File \"models.mercadoria.Mercadoria.java\", line 13, character 49 (models.mercadoria.Mercadoria.java:13)>\nnon_null for field 'cor' <File \"models.mercadoria.Mercadoria.java\", line 17, character 48 (models.mercadoria.Mercadoria.java:17)>\nnon_null for field 'tamanho' <File \"models.mercadoria.Mercadoria.java\", line 21, character 52 (models.mercadoria.Mercadoria.java:21)>\nnon_null for field 'produto' <File \"models.mercadoria.Mercadoria.java\", line 25, character 52 (models.mercadoria.Mercadoria.java:25)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Mercadoria.java\"> regarding code at \nFile \"Mercadoria.java\"\nnon_null for field 'nome' <File \"models.mercadoria.Mercadoria.java\", line 13, character 49 (models.mercadoria.Mercadoria.java:13)>\nnon_null for field 'cor' <File \"models.mercadoria.Mercadoria.java\", line 17, character 48 (models.mercadoria.Mercadoria.java:17)>\nnon_null for field 'tamanho' <File \"models.mercadoria.Mercadoria.java\", line 21, character 52 (models.mercadoria.Mercadoria.java:21)>\nnon_null for field 'produto' <File \"models.mercadoria.Mercadoria.java\", line 25, character 52 (models.mercadoria.Mercadoria.java:25)>\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Mercadoria{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_Mercadoria;
    before(): (execution(double models.mercadoria.Mercadoria.getPreco())
            || execution(int models.mercadoria.Mercadoria.getID())
            || execution(java.lang.String models.mercadoria.Mercadoria.getNome())
            || execution(java.lang.String models.mercadoria.Mercadoria.getCor())
            || execution(java.lang.String models.mercadoria.Mercadoria.getTamanho())
            || execution(java.lang.String models.mercadoria.Mercadoria.getProduto())
            || execution(void models.mercadoria.Mercadoria.setPreco(double))
            || execution(void models.mercadoria.Mercadoria.setNome(java.lang.String))
            || execution(void models.mercadoria.Mercadoria.setCor(java.lang.String))
            || execution(void models.mercadoria.Mercadoria.setTamanho(java.lang.String))
            || execution(void models.mercadoria.Mercadoria.setProduto(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_Mercadoria{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_Mercadoria, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * models.mercadoria.Mercadoria+.*(..))
            || execution(models.mercadoria.Mercadoria+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
