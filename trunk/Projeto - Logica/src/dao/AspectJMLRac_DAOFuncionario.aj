package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOFuncionario {











  /** Generated by JML to check the normal postcondition of
   * method conectar. */
  after (final dao.DAOFuncionario object$rac) returning () :
     execution(void dao.DAOFuncionario.conectar()) && this(object$rac) {
       boolean rac$b = (!true || ((dao.DAOFuncionario.con != null) && (dao.DAOFuncionario.comando != null)));
       String nPostErrorMsg =  "by method dao.DAOFuncionario.conectar regarding specifications at \nFile \"dao.DAOFuncionario.java\", [spec-case]: line 20, character 27 (dao.DAOFuncionario.java:20), line 21, character 31 (dao.DAOFuncionario.java:21), and \nby method dao.DAOFuncionario.conectar regarding code at \nFile \"dao.DAOFuncionario.java\", line 24 (dao.DAOFuncionario.java:24)"+", when \n"+"\t\'dao.DAOFuncionario.con\' is "+dao.DAOFuncionario.con+"\n\t\'dao.DAOFuncionario.comando\' is "+dao.DAOFuncionario.comando;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\" by method dao.DAOFuncionario.conectar regarding specifications at \n[spec-case]: line 20, character 27 (dao.DAOFuncionario.java:20), line 21, character 31 (dao.DAOFuncionario.java:21)"+", when \n"+"\t\'dao.DAOFuncionario.con\' is "+dao.DAOFuncionario.con+"\n\t\'dao.DAOFuncionario.comando\' is "+dao.DAOFuncionario.comando+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.conectar()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method conectar. */
  after (final dao.DAOFuncionario object$rac) throwing (Throwable rac$e) :
     execution(void dao.DAOFuncionario.conectar()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.conectar()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.DAOFuncionario.java\" by method dao.DAOFuncionario.conectar\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.DAOFuncionario.conectar regarding code at \nFile \"dao.DAOFuncionario.java\", line 24 (dao.DAOFuncionario.java:24)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.conectar()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionario. */
  after (final dao.DAOFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.DAOFuncionario.listarFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.listarFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFuncionario.listarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 125 (dao.DAOFuncionario.java:125)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.listarFuncionario()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final dao.DAOFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFuncionario.buscarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 153 (dao.DAOFuncionario.java:153)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarRg. */
  after (final dao.DAOFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(java.lang.String dao.DAOFuncionario.buscarRg(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFuncionario.buscarRg(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFuncionario.buscarRg regarding code at \nFile \"dao.DAOFuncionario.java\", line 197 (dao.DAOFuncionario.java:197)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFuncionario.buscarRg(java.lang.String rg)");
  	 }


  /** Generated by JML to check the precondition of
   * method conectar. */
  before (final dao.DAOFuncionario object$rac) :
     execution(void dao.DAOFuncionario.conectar()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.conectar regarding specifications at \nFile \"dao.DAOFuncionario.java\", [spec-case]: line 19, character 23 (dao.DAOFuncionario.java:19), and \nby method dao.DAOFuncionario.conectar regarding code at \nFile \"dao.DAOFuncionario.java\", line 24 (dao.DAOFuncionario.java:24)";
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\" by method dao.DAOFuncionario.conectar regarding specifications at \n[spec-case]: line 19, character 23 (dao.DAOFuncionario.java:19)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.conectar()");

     }

  /** Generated by JML to check the precondition of
   * method criarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.criarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 38 (dao.DAOFuncionario.java:38)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method atualizarSalario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.atualizarSalario regarding code at \nFile \"dao.DAOFuncionario.java\", line 59 (dao.DAOFuncionario.java:59)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method editarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.editarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 73 (dao.DAOFuncionario.java:73)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(void dao.DAOFuncionario.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.apagarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 91 (dao.DAOFuncionario.java:91)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.buscarFuncionario regarding code at \nFile \"dao.DAOFuncionario.java\", line 130 (dao.DAOFuncionario.java:130)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method quantidadeVendas. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.quantidadeVendas regarding code at \nFile \"dao.DAOFuncionario.java\", line 159 (dao.DAOFuncionario.java:159)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method buscarRg. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(java.lang.String dao.DAOFuncionario.buscarRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.buscarRg regarding code at \nFile \"dao.DAOFuncionario.java\", line 181 (dao.DAOFuncionario.java:181)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.buscarRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method checaRg. */
  before (final dao.DAOFuncionario object$rac, final java.lang.String rg) :
     execution(boolean dao.DAOFuncionario.checaRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.checaRg regarding code at \nFile \"dao.DAOFuncionario.java\", line 204 (dao.DAOFuncionario.java:204)"+", when \n"+"\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.checaRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarSalario. */
  before (final dao.DAOFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOFuncionario.buscarSalario regarding code at \nFile \"dao.DAOFuncionario.java\", line 231 (dao.DAOFuncionario.java:231)"+", when \n"+"\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_DAOFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_DAOFuncionario;
    before(): (execution(void dao.DAOFuncionario.conectar())
            || execution(void dao.DAOFuncionario.criarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.atualizarSalario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.editarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.DAOFuncionario.apagarFuncionario(java.lang.String))
            || execution(models.funcionario.IFuncionario dao.DAOFuncionario.buscarFuncionario(java.lang.String))
            || execution(int dao.DAOFuncionario.quantidadeVendas(models.funcionario.IFuncionario))
            || execution(java.lang.String dao.DAOFuncionario.buscarRg(java.lang.String))
            || execution(boolean dao.DAOFuncionario.checaRg(java.lang.String))
            || execution(double dao.DAOFuncionario.buscarSalario(models.funcionario.IFuncionario))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOFuncionario+.*(..))
            || execution(dao.DAOFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
