package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOFactory {




  /** Generated by JML to check the exceptional postcondition of
   * method createDAOFuncionario. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOFuncionario dao.DAOFactory.createDAOFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOFuncionario regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOFuncionario()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOMercadoria. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOMercadoria dao.DAOFactory.createDAOMercadoria()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOMercadoria()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOMercadoria regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOMercadoria()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOVendas. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOVendas dao.DAOFactory.createDAOVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOVendas regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOVendas()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method createDAOFactory. */
   after (final int whichFactory) returning (dao.DAOFactory rac$result) :
     execution(static dao.DAOFactory dao.DAOFactory.createDAOFactory(int)) && args(whichFactory) {
       boolean rac$b = ((!(whichFactory == 0) || ((rac$result != null) && true)) && (!(whichFactory != 0) || ((rac$result != null) && (rac$result == null))));
       String nPostErrorMsg =  "by method dao.DAOFactory.createDAOFactory regarding specifications at \nFile \"dao.DAOFactory.java\", [spec-case]: line 19, character 26 (dao.DAOFactory.java:19), and \n[spec-case]: line 25, character 31 (dao.DAOFactory.java:25), and \nby method dao.DAOFactory.createDAOFactory regarding code at \nFile \"dao.DAOFactory.java\", line 28 (dao.DAOFactory.java:28)";
       String evalErrorMsg = "Invalid expression in \"dao.DAOFactory.java\" by method dao.DAOFactory.createDAOFactory regarding specifications at \n[spec-case]: line 19, character 26 (dao.DAOFactory.java:19), and \n[spec-case]: line 25, character 31 (dao.DAOFactory.java:25)\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.DAOFactory.createDAOFactory(int whichFactory)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOFactory. */
   after (final int whichFactory) throwing (Throwable rac$e) :
     execution(static dao.DAOFactory dao.DAOFactory.createDAOFactory(int)) && args(whichFactory) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOFactory(int whichFactory)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOFactory regarding code at \nFile \"dao.DAOFactory.java\", line 28 (dao.DAOFactory.java:28)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOFactory(int whichFactory)");
  	 }

  /** Generated by JML to check non-static invariants of 
   * class DAOFactory. */
  before (final dao.DAOFactory object$rac) :
     execution(!static * dao.DAOFactory+.*(..)) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       boolean rac$b = true;
       String invErrorMsg = "@pre <File \"DAOFactory.java\"> regarding specifications at \nFile \"DAOFactory.java\", line 8, character 29 (DAOFactory.java:8)";
       String evalErrorMsg = "Invalid expression in \"@pre <File \"DAOFactory.java\"> regarding specifications at \nFile \"DAOFactory.java\", line 8, character 29 (DAOFactory.java:8)"+"\nCaused by: ";
       JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

     }

  /** Generated by JML to check the precondition of
   * method createDAOFactory. */
  before (final int whichFactory) :
     execution(static dao.DAOFactory dao.DAOFactory.createDAOFactory(int)) && args(whichFactory) {
       boolean rac$b = ((whichFactory == 0) || (whichFactory != 0));
       boolean canThrow = true;
       String preErrorMsg = "by method dao.DAOFactory.createDAOFactory regarding specifications at \nFile \"dao.DAOFactory.java\", [spec-case]: line 18, character 37 (dao.DAOFactory.java:18), and \n[spec-case]: line 24, character 37 (dao.DAOFactory.java:24), and \nby method dao.DAOFactory.createDAOFactory regarding code at \nFile \"dao.DAOFactory.java\", line 28 (dao.DAOFactory.java:28)"+", when \n"+"\t\'whichFactory\' is "+whichFactory;
       String evalErrorMsg = "Invalid expression in \"dao.DAOFactory.java\" by method dao.DAOFactory.createDAOFactory regarding specifications at \n[spec-case]: line 18, character 37 (dao.DAOFactory.java:18), and \n[spec-case]: line 24, character 37 (dao.DAOFactory.java:24)"+", when \n"+"\t\'whichFactory\' is "+whichFactory+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOFactory.createDAOFactory(int whichFactory)");

     }


  /** Generated by JML to check non-static invariants of 
   * class DAOFactory. */
  after (final dao.DAOFactory object$rac) :
     (execution(!static * dao.DAOFactory+.*(..)) || 
       execution(dao.DAOFactory+.new(..))) && 
     !execution(void dao.DAOFactory.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         boolean rac$b = true;
         String invErrorMsg = "@post <File \"DAOFactory.java\"> regarding specifications at \nFile \"DAOFactory.java\", line 8, character 29 (DAOFactory.java:8)";
         String evalErrorMsg = "Invalid expression in \"@post <File \"DAOFactory.java\"> regarding specifications at \nFile \"DAOFactory.java\", line 8, character 29 (DAOFactory.java:8)"+"\nCaused by: ";
         JMLChecker.checkInvariant(rac$b, invErrorMsg, evalErrorMsg, -1, false);

       }
     }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFactory{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFactory, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOFactory+.*(..))
            || execution(dao.DAOFactory+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
