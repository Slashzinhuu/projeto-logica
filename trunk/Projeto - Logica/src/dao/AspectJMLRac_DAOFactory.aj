package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOFactory {




  /** Generated by JML to check the exceptional postcondition of
   * method createDAOFuncionario. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOFuncionario dao.DAOFactory.createDAOFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOFuncionario regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOFuncionario()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOMercadoria. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOMercadoria dao.DAOFactory.createDAOMercadoria()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOMercadoria()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOMercadoria regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOMercadoria()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOVendas. */
  after (final dao.DAOFactory object$rac) throwing (Throwable rac$e) :
     execution(dao.DAOVendas dao.DAOFactory.createDAOVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOVendas regarding specifications at \nFile \"dao.DAOFactory.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOVendas()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method createDAOFactory. */
   after (final int whichFactory) throwing (Throwable rac$e) :
     execution(static dao.DAOFactory dao.DAOFactory.createDAOFactory(int)) && args(whichFactory) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOFactory.createDAOFactory(int whichFactory)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOFactory.createDAOFactory regarding code at \nFile \"dao.DAOFactory.java\", line 17 (dao.DAOFactory.java:17)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOFactory.createDAOFactory(int whichFactory)");
  	 }




  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFactory{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOFactory, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOFactory+.*(..))
            || execution(dao.DAOFactory+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
