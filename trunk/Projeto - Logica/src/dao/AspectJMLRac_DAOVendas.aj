package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOVendas {






  /** Generated by JML to check the exceptional postcondition of
   * method listarVendas. */
  after (final dao.DAOVendas object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.DAOVendas.listarVendas()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOVendas.listarVendas()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOVendas.listarVendas regarding code at \nFile \"dao.DAOVendas.java\", line 102 (dao.DAOVendas.java:102)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOVendas.listarVendas()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarVenda. */
  after (final dao.DAOVendas object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.venda.IVenda dao.DAOVendas.buscarVenda(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOVendas.buscarVenda(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOVendas.buscarVenda regarding code at \nFile \"dao.DAOVendas.java\", line 129 (dao.DAOVendas.java:129)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOVendas.buscarVenda(int ID)");
  	 }


  /** Generated by JML to check the precondition of
   * method criarVenda. */
  before (final dao.DAOVendas object$rac, final models.venda.IVenda venda) :
     execution(void dao.DAOVendas.criarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOVendas.criarVenda regarding code at \nFile \"dao.DAOVendas.java\", line 33 (dao.DAOVendas.java:33)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"dao.DAOVendas.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOVendas.criarVenda(models.venda.IVenda venda)");

     }

  /** Generated by JML to check the precondition of
   * method editarVenda. */
  before (final dao.DAOVendas object$rac, final models.venda.IVenda venda) :
     execution(void dao.DAOVendas.editarVenda(models.venda.IVenda)) && 
     this(object$rac) && args(venda) {
       boolean rac$b = (venda != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOVendas.editarVenda regarding code at \nFile \"dao.DAOVendas.java\", line 52 (dao.DAOVendas.java:52)"+", when \n"+"\t\'venda\' is "+venda;
       String evalErrorMsg = "Invalid expression in \"dao.DAOVendas.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOVendas.editarVenda(models.venda.IVenda venda)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_DAOVendas{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_DAOVendas;
    before(): (execution(void dao.DAOVendas.criarVenda(models.venda.IVenda))
            || execution(void dao.DAOVendas.editarVenda(models.venda.IVenda))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOVendas{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOVendas, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOVendas+.*(..))
            || execution(dao.DAOVendas+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
