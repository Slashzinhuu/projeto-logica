package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IDaoFuncionario {










  /** Generated by JML to check the exceptional postcondition of
   * method apagarFuncionario. */
  after (final dao.IDaoFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(void dao.IDaoFuncionario.apagarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.apagarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((rg != null) && (rg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.apagarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.apagarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.apagarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method listarFuncionario. */
  after (final dao.IDaoFuncionario object$rac) returning (java.util.List rac$result) :
     execution(java.util.List dao.IDaoFuncionario.listarFuncionario()) && this(object$rac) {
       boolean rac$b = (!true || ((rac$result != null) && (rac$result != null)));
       String nPostErrorMsg =  "by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", [spec-case]: line 32, character 31 (dao.IDaoFuncionario.java:32)";
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \n[spec-case]: line 32, character 31 (dao.IDaoFuncionario.java:32)\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.listarFuncionario()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionario. */
  after (final dao.IDaoFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.IDaoFuncionario.listarFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.listarFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.listarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.listarFuncionario()");
  	 }

  /** Generated by JML to check the normal postcondition of
   * method buscarFuncionario. */
  after (final dao.IDaoFuncionario object$rac, final java.lang.String rg) returning (models.funcionario.IFuncionario rac$result) :
     execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
       boolean rac$b = (!((rg != null) && (rg != null)) || ((rac$result != null) && (rac$result != null)));
       String nPostErrorMsg =  "by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", [spec-case]: line 36, character 31 (dao.IDaoFuncionario.java:36)";
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \n[spec-case]: line 36, character 31 (dao.IDaoFuncionario.java:36)\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final dao.IDaoFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((rg != null) && (rg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarRg. */
  after (final dao.IDaoFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(java.lang.String dao.IDaoFuncionario.buscarRg(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.buscarRg(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((rg != null) && (rg != null))) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarRg\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.buscarRg regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.buscarRg(java.lang.String rg)");
  	 }


  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(void dao.IDaoFuncionario.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = ((rg != null) && (rg != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 28, character 27 (dao.IDaoFuncionario.java:28), and \nby method dao.IDaoFuncionario.apagarFuncionario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.apagarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.apagarFuncionario regarding specifications at \n[spec-case]: line 28, character 27 (dao.IDaoFuncionario.java:28)"+", when \n"+"\t\'rg\' is "+rg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method listarFuncionario. */
  before (final dao.IDaoFuncionario object$rac) :
     execution(java.util.List dao.IDaoFuncionario.listarFuncionario()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 31, character 27 (dao.IDaoFuncionario.java:31), and \nby method dao.IDaoFuncionario.listarFuncionario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \n[spec-case]: line 31, character 27 (dao.IDaoFuncionario.java:31)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.listarFuncionario()");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = ((rg != null) && (rg != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 35, character 27 (dao.IDaoFuncionario.java:35), and \nby method dao.IDaoFuncionario.buscarFuncionario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \n[spec-case]: line 35, character 27 (dao.IDaoFuncionario.java:35)"+", when \n"+"\t\'rg\' is "+rg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarRg. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(java.lang.String dao.IDaoFuncionario.buscarRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = ((rg != null) && (rg != null));
       boolean canThrow = false;
       String preErrorMsg = ", [spec-case]: line 53, character 27 (dao.IDaoFuncionario.java:53), and \nby method dao.IDaoFuncionario.buscarRg regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.buscarRg regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarRg regarding specifications at \n[spec-case]: line 53, character 27 (dao.IDaoFuncionario.java:53)"+", when \n"+"\t\'rg\' is "+rg+"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method checaRg. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(boolean dao.IDaoFuncionario.checaRg(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.checaRg regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.checaRg(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method criarFuncionario. */
  void around (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = ", [spec-case]: line 9, character 36 (dao.IDaoFuncionario.java:9), line 10, character 43 (dao.IDaoFuncionario.java:10), line 11, character 41 (dao.IDaoFuncionario.java:11), line 12, character 42 (dao.IDaoFuncionario.java:12), line 13, character 53 (dao.IDaoFuncionario.java:13), line 14, character 44 (dao.IDaoFuncionario.java:14), line 15, character 46 (dao.IDaoFuncionario.java:15), and \nby method dao.IDaoFuncionario.criarFuncionario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.criarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.criarFuncionario regarding specifications at \n[spec-case]: line 9, character 36 (dao.IDaoFuncionario.java:9), line 10, character 43 (dao.IDaoFuncionario.java:10), line 11, character 41 (dao.IDaoFuncionario.java:11), line 12, character 42 (dao.IDaoFuncionario.java:12), line 13, character 53 (dao.IDaoFuncionario.java:13), line 14, character 44 (dao.IDaoFuncionario.java:14), line 15, character 46 (dao.IDaoFuncionario.java:15)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method dao.IDaoFuncionario.criarFuncionario at \nFile \"dao.IDaoFuncionario.java\"";
        String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.criarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.criarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method editarFuncionario. */
  void around (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = ", [spec-case]: line 18, character 36 (dao.IDaoFuncionario.java:18), line 19, character 43 (dao.IDaoFuncionario.java:19), line 20, character 41 (dao.IDaoFuncionario.java:20), line 21, character 42 (dao.IDaoFuncionario.java:21), line 22, character 53 (dao.IDaoFuncionario.java:22), line 23, character 44 (dao.IDaoFuncionario.java:23), line 24, character 46 (dao.IDaoFuncionario.java:24), and \nby method dao.IDaoFuncionario.editarFuncionario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.editarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.editarFuncionario regarding specifications at \n[spec-case]: line 18, character 36 (dao.IDaoFuncionario.java:18), line 19, character 43 (dao.IDaoFuncionario.java:19), line 20, character 41 (dao.IDaoFuncionario.java:20), line 21, character 42 (dao.IDaoFuncionario.java:21), line 22, character 53 (dao.IDaoFuncionario.java:22), line 23, character 44 (dao.IDaoFuncionario.java:23), line 24, character 46 (dao.IDaoFuncionario.java:24)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method dao.IDaoFuncionario.editarFuncionario at \nFile \"dao.IDaoFuncionario.java\"";
        String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.editarFuncionario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.editarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method atualizarSalario. */
  void around (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((funcionario != null) && (funcionario.getRg() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = ", [spec-case]: line 39, character 36 (dao.IDaoFuncionario.java:39), line 40, character 41 (dao.IDaoFuncionario.java:40), line 41, character 46 (dao.IDaoFuncionario.java:41), and \nby method dao.IDaoFuncionario.atualizarSalario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.atualizarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.atualizarSalario regarding specifications at \n[spec-case]: line 39, character 36 (dao.IDaoFuncionario.java:39), line 40, character 41 (dao.IDaoFuncionario.java:40), line 41, character 46 (dao.IDaoFuncionario.java:41)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((funcionario != null) && (funcionario.getRg() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");
      try {
        proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method dao.IDaoFuncionario.atualizarSalario at \nFile \"dao.IDaoFuncionario.java\"";
        String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.atualizarSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.atualizarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method quantidadeVendas. */
  int around (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: "+rac$cause);
       }
      String preErrorMsg = ", [spec-case]: line 44, character 36 (dao.IDaoFuncionario.java:44), line 45, character 43 (dao.IDaoFuncionario.java:45), line 46, character 41 (dao.IDaoFuncionario.java:46), line 47, character 42 (dao.IDaoFuncionario.java:47), line 48, character 53 (dao.IDaoFuncionario.java:48), line 49, character 44 (dao.IDaoFuncionario.java:49), line 50, character 46 (dao.IDaoFuncionario.java:50), and \nby method dao.IDaoFuncionario.quantidadeVendas regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.quantidadeVendas regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.quantidadeVendas regarding specifications at \n[spec-case]: line 44, character 36 (dao.IDaoFuncionario.java:44), line 45, character 43 (dao.IDaoFuncionario.java:45), line 46, character 41 (dao.IDaoFuncionario.java:46), line 47, character 42 (dao.IDaoFuncionario.java:47), line 48, character 53 (dao.IDaoFuncionario.java:48), line 49, character 44 (dao.IDaoFuncionario.java:49), line 50, character 46 (dao.IDaoFuncionario.java:50)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
      int rac$result = 0;
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        rac$b = true;
        String nPostErrorMsg =  "by method dao.IDaoFuncionario.quantidadeVendas at \nFile \"dao.IDaoFuncionario.java\"";
        String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.quantidadeVendas\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.quantidadeVendas regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
      return rac$result;
  	}

  /** Generated by JML to check the precondition, normal and
   * exceptional postcondition of method buscarSalario. */
  double around (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario))
     && this(object$rac) && args(funcionario) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving all old values
  		rac$pre0 = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
             throw new JMLEvaluationError("Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarSalario regarding specifications at \n[spec-case]: line 63, character 31 (dao.IDaoFuncionario.java:63)\nCaused by: "+rac$cause);
       }
      String preErrorMsg = ", [spec-case]: line 56, character 36 (dao.IDaoFuncionario.java:56), line 57, character 43 (dao.IDaoFuncionario.java:57), line 58, character 41 (dao.IDaoFuncionario.java:58), line 59, character 42 (dao.IDaoFuncionario.java:59), line 60, character 53 (dao.IDaoFuncionario.java:60), line 61, character 44 (dao.IDaoFuncionario.java:61), line 62, character 46 (dao.IDaoFuncionario.java:62), and \nby method dao.IDaoFuncionario.buscarSalario regarding code at \nFile \"dao.IDaoFuncionario.java\"by method dao.IDaoFuncionario.buscarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
      String evalPreErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarSalario regarding specifications at \n[spec-case]: line 56, character 36 (dao.IDaoFuncionario.java:56), line 57, character 43 (dao.IDaoFuncionario.java:57), line 58, character 41 (dao.IDaoFuncionario.java:58), line 59, character 42 (dao.IDaoFuncionario.java:59), line 60, character 53 (dao.IDaoFuncionario.java:60), line 61, character 44 (dao.IDaoFuncionario.java:61), line 62, character 46 (dao.IDaoFuncionario.java:62)"+", when \n"+"\t\'funcionario\' is "+funcionario+"\nCaused by: ";
      try {
        rac$b = ((funcionario != null) && (((((((funcionario != null) && (funcionario.getNome() != null)) && (funcionario.getRg() != null)) && (funcionario.getCpf() != null)) && (funcionario.getDataNascimento() != null)) && (funcionario.getCargo() != null)) && (funcionario.getSalario() >= +0.0D)));
       } catch (Throwable rac$cause) {
           throw new JMLEvaluationError(evalPreErrorMsg);
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalPreErrorMsg, -1, false, "dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");
      double rac$result = 0.0d;
      try {
        rac$result = proceed(object$rac, funcionario);//executing the method
        rac$b = (!rac$pre0 || (rac$result >= +0.0D));
        String nPostErrorMsg =  "by method dao.IDaoFuncionario.buscarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", [spec-case]: line 63, character 31 (dao.IDaoFuncionario.java:63)";
        String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarSalario regarding specifications at \n[spec-case]: line 63, character 31 (dao.IDaoFuncionario.java:63)\nCaused by: ";
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");
      } catch (Throwable rac$e) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.IDaoFuncionario.java\" by method dao.IDaoFuncionario.buscarSalario\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.buscarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");
           if(!JMLChecker.hasAnyJMLError){
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  		}
      return rac$result;
  	}



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IDaoFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IDaoFuncionario;
    before(): (execution(void dao.IDaoFuncionario.apagarFuncionario(java.lang.String))
            || execution(java.util.List dao.IDaoFuncionario.listarFuncionario())
            || execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String))
            || execution(java.lang.String dao.IDaoFuncionario.buscarRg(java.lang.String))
            || execution(boolean dao.IDaoFuncionario.checaRg(java.lang.String))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IDaoFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IDaoFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.IDaoFuncionario+.*(..))
            || execution(dao.IDaoFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
