package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_IDaoFuncionario {








  /** Generated by JML to check the exceptional postcondition of
   * method listarFuncionario. */
  after (final dao.IDaoFuncionario object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.IDaoFuncionario.listarFuncionario()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.listarFuncionario()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.listarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.listarFuncionario()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarFuncionario. */
  after (final dao.IDaoFuncionario object$rac, final java.lang.String rg) throwing (Throwable rac$e) :
     execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String)) && this(object$rac) && args(rg) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\"";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");
  	 }


  /** Generated by JML to check the precondition of
   * method criarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.criarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method editarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.editarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method apagarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(void dao.IDaoFuncionario.apagarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.apagarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.apagarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method buscarFuncionario. */
  before (final dao.IDaoFuncionario object$rac, final java.lang.String rg) :
     execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String)) && 
     this(object$rac) && args(rg) {
       boolean rac$b = (rg != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.buscarFuncionario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'rg\' is "+rg;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarFuncionario(java.lang.String rg)");

     }

  /** Generated by JML to check the precondition of
   * method atualizarSalario. */
  before (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(void dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.atualizarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method quantidadeVendas. */
  before (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(int dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.quantidadeVendas regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario funcionario)");

     }

  /** Generated by JML to check the precondition of
   * method buscarSalario. */
  before (final dao.IDaoFuncionario object$rac, final models.funcionario.IFuncionario funcionario) :
     execution(double dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario)) && 
     this(object$rac) && args(funcionario) {
       boolean rac$b = (funcionario != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.IDaoFuncionario.buscarSalario regarding specifications at \nFile \"dao.IDaoFuncionario.java\", when \n\t\'funcionario\' is "+funcionario;
       String evalErrorMsg = "Invalid expression in \"dao.IDaoFuncionario.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario funcionario)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_IDaoFuncionario{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_IDaoFuncionario;
    before(): (execution(void dao.IDaoFuncionario.criarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.IDaoFuncionario.editarFuncionario(models.funcionario.IFuncionario))
            || execution(void dao.IDaoFuncionario.apagarFuncionario(java.lang.String))
            || execution(models.funcionario.IFuncionario dao.IDaoFuncionario.buscarFuncionario(java.lang.String))
            || execution(void dao.IDaoFuncionario.atualizarSalario(models.funcionario.IFuncionario))
            || execution(int dao.IDaoFuncionario.quantidadeVendas(models.funcionario.IFuncionario))
            || execution(double dao.IDaoFuncionario.buscarSalario(models.funcionario.IFuncionario))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_IDaoFuncionario{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_IDaoFuncionario, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.IDaoFuncionario+.*(..))
            || execution(dao.IDaoFuncionario+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
