package dao;

import org.jmlspecs.ajmlrac.runtime.*;

public privileged aspect AspectJMLRac_DAOMercadoria {







  /** Generated by JML to check the normal postcondition of
   * method conectar. */
  after (final dao.DAOMercadoria object$rac) returning () :
     execution(void dao.DAOMercadoria.conectar()) && this(object$rac) {
       boolean rac$b = (!true || ((dao.DAOMercadoria.con != null) && (dao.DAOMercadoria.comando != null)));
       String nPostErrorMsg =  "by method dao.DAOMercadoria.conectar regarding specifications at \nFile \"dao.DAOMercadoria.java\", [spec-case]: line 21, character 35 (dao.DAOMercadoria.java:21), line 22, character 39 (dao.DAOMercadoria.java:22), and \nby method dao.DAOMercadoria.conectar regarding code at \nFile \"dao.DAOMercadoria.java\", line 25 (dao.DAOMercadoria.java:25)"+", when \n"+"\t\'dao.DAOMercadoria.con\' is "+dao.DAOMercadoria.con+"\n\t\'dao.DAOMercadoria.comando\' is "+dao.DAOMercadoria.comando;
       String evalErrorMsg = "Invalid expression in \"dao.DAOMercadoria.java\" by method dao.DAOMercadoria.conectar regarding specifications at \n[spec-case]: line 21, character 35 (dao.DAOMercadoria.java:21), line 22, character 39 (dao.DAOMercadoria.java:22)"+", when \n"+"\t\'dao.DAOMercadoria.con\' is "+dao.DAOMercadoria.con+"\n\t\'dao.DAOMercadoria.comando\' is "+dao.DAOMercadoria.comando+"\nCaused by: ";
       JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, evalErrorMsg, -1, false, "dao.DAOMercadoria.conectar()");

     }

  /** Generated by JML to check the exceptional postcondition of
   * method conectar. */
  after (final dao.DAOMercadoria object$rac) throwing (Throwable rac$e) :
     execution(void dao.DAOMercadoria.conectar()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOMercadoria.conectar()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.Exception) {
  			   java.lang.Exception jml$e = (java.lang.Exception) rac$e;
  			   boolean rac$b0 = true;
  			   if(rac$ErrorMsg.equals("")) {
  			     rac$ErrorMsg += "jml$e";
  			   }
  			   else {
  			     rac$ErrorMsg += "and jml$e";
  			   }
  			   try{
  			     
  			     rac$b0 = false;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     rac$b0 = true;
  			   } catch (Throwable rac$cause) {
  			     throw new JMLEvaluationError("Invalid Expression in \"dao.DAOMercadoria.java\" by method dao.DAOMercadoria.conectar\nCaused by: "+rac$cause);
  			   }
  			   rac$b = rac$b && rac$b0;
  		     }
  		   }
           String xPostErrorMsg =  "by method dao.DAOMercadoria.conectar regarding code at \nFile \"dao.DAOMercadoria.java\", line 25 (dao.DAOMercadoria.java:25)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOMercadoria.conectar()");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method buscarMercadoria_ID. */
  after (final dao.DAOMercadoria object$rac, final int ID) throwing (Throwable rac$e) :
     execution(models.mercadoria.IMercadoria dao.DAOMercadoria.buscarMercadoria_ID(int)) && this(object$rac) && args(ID) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOMercadoria.buscarMercadoria_ID(int ID)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOMercadoria.buscarMercadoria_ID regarding code at \nFile \"dao.DAOMercadoria.java\", line 111 (dao.DAOMercadoria.java:111)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOMercadoria.buscarMercadoria_ID(int ID)");
  	 }

  /** Generated by JML to check the exceptional postcondition of
   * method listarMercadorias. */
  after (final dao.DAOMercadoria object$rac) throwing (Throwable rac$e) :
     execution(java.util.List dao.DAOMercadoria.listarMercadorias()) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "dao.DAOMercadoria.listarMercadorias()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";
           String xPostErrorMsg =  "by method dao.DAOMercadoria.listarMercadorias regarding code at \nFile \"dao.DAOMercadoria.java\", line 139 (dao.DAOMercadoria.java:139)";
           if(rac$ErrorMsg.indexOf("and") >= 0){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
           JMLChecker.checkExceptionalPostcondition(rac$b, xPostErrorMsg+"\n\t"+rac$ErrorMsg+rac$e, -1, false, "dao.DAOMercadoria.listarMercadorias()");
  	 }


  /** Generated by JML to check the precondition of
   * method conectar. */
  before (final dao.DAOMercadoria object$rac) :
     execution(void dao.DAOMercadoria.conectar()) && 
     this(object$rac) {
       boolean rac$b = (true);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOMercadoria.conectar regarding specifications at \nFile \"dao.DAOMercadoria.java\", [spec-case]: line 20, character 31 (dao.DAOMercadoria.java:20), and \nby method dao.DAOMercadoria.conectar regarding code at \nFile \"dao.DAOMercadoria.java\", line 25 (dao.DAOMercadoria.java:25)";
       String evalErrorMsg = "Invalid expression in \"dao.DAOMercadoria.java\" by method dao.DAOMercadoria.conectar regarding specifications at \n[spec-case]: line 20, character 31 (dao.DAOMercadoria.java:20)\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOMercadoria.conectar()");

     }

  /** Generated by JML to check the precondition of
   * method criarMercadoria. */
  before (final dao.DAOMercadoria object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void dao.DAOMercadoria.criarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOMercadoria.criarMercadoria regarding code at \nFile \"dao.DAOMercadoria.java\", line 39 (dao.DAOMercadoria.java:39)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"dao.DAOMercadoria.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOMercadoria.criarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }

  /** Generated by JML to check the precondition of
   * method editarMercadoria. */
  before (final dao.DAOMercadoria object$rac, final models.mercadoria.IMercadoria mercadoria) :
     execution(void dao.DAOMercadoria.editarMercadoria(models.mercadoria.IMercadoria)) && 
     this(object$rac) && args(mercadoria) {
       boolean rac$b = (mercadoria != null);
       boolean canThrow = false;
       String preErrorMsg = "by method dao.DAOMercadoria.editarMercadoria regarding code at \nFile \"dao.DAOMercadoria.java\", line 59 (dao.DAOMercadoria.java:59)"+", when \n"+"\t\'mercadoria\' is "+mercadoria;
       String evalErrorMsg = "Invalid expression in \"dao.DAOMercadoria.java\"\nCaused by: ";
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, evalErrorMsg, -1, false, "dao.DAOMercadoria.editarMercadoria(models.mercadoria.IMercadoria mercadoria)");

     }



  /** Generated by JML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_DAOMercadoria{
    declare precedence: AspectJMLRac*, UtilPreconditionChecking_DAOMercadoria;
    before(): (execution(void dao.DAOMercadoria.conectar())
            || execution(void dao.DAOMercadoria.criarMercadoria(models.mercadoria.IMercadoria))
            || execution(void dao.DAOMercadoria.editarMercadoria(models.mercadoria.IMercadoria))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }

  /** Generated by JML to throw satisfied and violated predicates
    *  from multiple spec case checking (if on), and to hide specific
    *  aspect stack trace elements from error reporting. */ 
  public static aspect UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOMercadoria{
    declare precedence: UtilMultipleSpecCaseCheckingAndStackTraceHiding_DAOMercadoria, AspectJMLRac*;

    after() throwing (Throwable rac$e): (execution( * dao.DAOMercadoria+.*(..))
            || execution(dao.DAOMercadoria+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
  }
}
